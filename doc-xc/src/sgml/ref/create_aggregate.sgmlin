<!--
doc/src/sgml/ref/create_aggregate.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEAGGREGATE">
 <refmeta>
  <refentrytitle>CREATE AGGREGATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE AGGREGATE</refname>
  <refpurpose>define a new aggregate function</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createaggregate">
  <primary>CREATE AGGREGATE</primary>
 </indexterm>

 <refsynopsisdiv>
<!## PG>
<synopsis>
CREATE AGGREGATE <replaceable class="PARAMETER">name</replaceable> ( <replaceable class="PARAMETER">input_data_type</replaceable> [ , ... ] ) (
    SFUNC = <replaceable class="PARAMETER">sfunc</replaceable>,
    STYPE = <replaceable class="PARAMETER">state_data_type</replaceable>
    [ , FINALFUNC = <replaceable class="PARAMETER">ffunc</replaceable> ]
    [ , INITCOND = <replaceable class="PARAMETER">initial_condition</replaceable> ]
    [ , SORTOP = <replaceable class="PARAMETER">sort_operator</replaceable> ]
)

<phrase>or the old syntax</phrase>

CREATE AGGREGATE <replaceable class="PARAMETER">name</replaceable> (
    BASETYPE = <replaceable class="PARAMETER">base_type</replaceable>,
    SFUNC = <replaceable class="PARAMETER">sfunc</replaceable>,
    STYPE = <replaceable class="PARAMETER">state_data_type</replaceable>
    [ , FINALFUNC = <replaceable class="PARAMETER">ffunc</replaceable> ]
    [ , INITCOND = <replaceable class="PARAMETER">initial_condition</replaceable> ]
    [ , SORTOP = <replaceable class="PARAMETER">sort_operator</replaceable> ]
)
</synopsis>
<!## end>
<!## XC>
<synopsis>
CREATE AGGREGATE <replaceable class="PARAMETER">name</replaceable> ( <replaceable class="PARAMETER">input_data_type</replaceable> [ , ... ] ) (
    SFUNC = <replaceable class="PARAMETER">sfunc</replaceable>,
    STYPE = <replaceable class="PARAMETER">state_data_type</replaceable>
    [ , CFUNC = <replaceable class="PARAMETER">cfunc</replaceable> ]
    [ , FINALFUNC = <replaceable class="PARAMETER">ffunc</replaceable> ]
    [ , INITCOND = <replaceable class="PARAMETER">initial_condition</replaceable> ]
    [ , INITCOLLECT = <replaceable class="PARAMETER">initial_collection_condition</replaceable> ]
    [ , SORTOP = <replaceable class="PARAMETER">sort_operator</replaceable> ]
)

<phrase>or the old syntax</phrase>

CREATE AGGREGATE <replaceable class="PARAMETER">name</replaceable> (
    BASETYPE = <replaceable class="PARAMETER">base_type</replaceable>,
    SFUNC = <replaceable class="PARAMETER">sfunc</replaceable>,
    STYPE = <replaceable class="PARAMETER">state_data_type</replaceable>
    [ , FINALFUNC = <replaceable class="PARAMETER">ffunc</replaceable> ]
    [ , INITCOND = <replaceable class="PARAMETER">initial_condition</replaceable> ]
    [ , SORTOP = <replaceable class="PARAMETER">sort_operator</replaceable> ]
)
</synopsis>
<!## end>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

&xconly;

  <para>
   <command>CREATE AGGREGATE</command> defines a new aggregate
   function. Some basic and commonly-used aggregate functions are
   included with the distribution; they are documented in <xref
   linkend="functions-aggregate">. If one defines new types or needs
   an aggregate function not already provided, then <command>CREATE
   AGGREGATE</command> can be used to provide the desired features.
  </para>

  <para>
   If a schema name is given (for example, <literal>CREATE AGGREGATE
   myschema.myagg ...</>) then the aggregate function is created in the
   specified schema.  Otherwise it is created in the current schema.
  </para>

  <para>
   An aggregate function is identified by its name and input data type(s).
   Two aggregates in the same schema can have the same name if they operate on
   different input types.  The
   name and input data type(s) of an aggregate must also be distinct from
   the name and input data type(s) of every ordinary function in the same
   schema.
  </para>

&xconly;
  <para>
<!## PG>
   An aggregate function is made from one or two ordinary
<!## end>
<!## XC>
   An aggregate function is made from one to maximum 3 ordinary
<!## end>
   functions:
   a state transition function
   <replaceable class="PARAMETER">sfunc</replaceable>,
<!## XC>
   an optional collection function
   <replaceable class="PARAMETER">cfunc</replaceable>,
<!## end>
   and an optional final calculation function
   <replaceable class="PARAMETER">ffunc</replaceable>.
   These are used as follows:
<!## PG>
<programlisting>
<replaceable class="PARAMETER">sfunc</replaceable>( internal-state, next-data-values ) ---> next-internal-state
<replaceable class="PARAMETER">ffunc</replaceable>( internal-state ) ---> aggregate-value
</programlisting>
<!## end>
<!## XC>
<programlisting>
<replaceable class="PARAMETER">sfunc</replaceable>( internal-state, next-data-values ) ---> next-internal-state
<replaceable class="PARAMETER">cfunc</replaceable>( internal-state, internal-state ) ---> next-internal-state
<replaceable class="PARAMETER">ffunc</replaceable>( internal-state ) ---> aggregate-value
</programlisting>
<!## end>
  </para>

  <para>
<!## PG>
   <productname>PostgreSQL</productname> creates a temporary variable
<!## end>
<!## XC>
   In <productname>Postgres-XC</productname> the aggregation works in two
   different modes. 
   <itemizedlist>
   <listitem>
   <para>
   Two phased aggregation - is used when the entire aggregation takes place on
   the Coordinator node. In first phase called transition phase,
   <productname>Postgres-XC</productname> creates a temporary variable
<!## end>
   of data type <replaceable class="PARAMETER">stype</replaceable>
   to hold the current internal state of the aggregate.  At each input row,
   the aggregate argument value(s) are calculated and
   the state transition function is invoked with the current state value
   and the new argument value(s) to calculate a new
<!## PG>
   internal state value.  After all the rows have been processed,
   the final function is invoked once to calculate the aggregate's return
   value.  If there is no final function then the ending state value
   is returned as-is.
<!## end>
<!## XC>
   internal state value.  After all the rows have been processed, in the second
   phase or finalization phase the final function is invoked once to calculate
   the aggregate's return value.  If there is no final function then the ending
   state value is returned as-is.
   </para>
   </listitem>
   <listitem>
   <para>
   Three phased aggregation - is used when the process of aggregation is divided
   between Coordinator and Datanodes. In this mode, each 
   <productname>Postgres-XC</productname> Datanode involved in the query carries
   out the first phase named transition phase. This phase is similar to the first
   phase in the two phased aggregation mode discussed above, except that, every
   Datanode applies this phase on the rows available at the Datanode. The
   result of transition phase is then transferred to the Coordinator node.
   Second phase called collection phase takes place on the Coordinator.
   <productname>Postgres-XC</productname> Coordinator node creates a temporary variable
   of data type <replaceable class="PARAMETER">stype</replaceable>
   to hold the current internal state of the collection phase.  For every input
   from the Datanode (result of transition phase on that node), the collection
   function is invoked with the current collection state value and the new
   transition value (obtained from the Datanode) to calculate a new
   internal collection state value.  After all the transition values from data
   nodes have been processed, in the third or finalization phase the final
   function is invoked once to calculate the aggregate's return
   value.  If there is no final function then the ending collection state value
   is returned as-is.
   </para>
   </listitem>
   </itemizedlist>
   Irrespective of the mode used for aggregation, the result of aggregation
   should be same if the same set of data rows is participating in the
   aggregate. <productname>Postgres-XC</productname> planner chooses the cheapest
   feasible mode of the above two, during planning.
<!## end>

  </para>

&xconly;
  <para>
   An aggregate function can provide an initial condition,
<!## PG>
   that is, an initial value for the internal state value.
   This is specified and stored in the database as a value of type
<!## end>
<!## XC>
   that is, an initial value for the internal transition or collection state
   value. This is specified and stored in the database as a value of type
<!## end>
   <type>text</type>, but it must be a valid external representation
   of a constant of the state value data type.  If it is not supplied
   then the state value starts out null.
  </para>

<!## XC>
&xconly;
  <para>
   If the collection function is declared <quote>strict</quote>,
   then it cannot be called with null inputs.  With such a collection 
   function, aggregate execution behaves as follows.  Null state transition
   results are ignored (the function is not called and the previous collection
   state value is retained).  If the initial state value is null, then at the
   first non-null state transition result replaces the collection state
   value, and the collection function is invoked at subsequent rows with
   all-nonnull transition values.
   This is handy for implementing aggregates like <function>max</function>.
  </para>
<!## end>  

  <para>
   If the state transition function is declared <quote>strict</quote>,
   then it cannot be called with null inputs.  With such a transition
   function, aggregate execution behaves as follows.  Rows with any null input
   values are ignored (the function is not called and the previous state value
   is retained).  If the initial state value is null, then at the first row
   with all-nonnull input values, the first argument value replaces the state
   value, and the transition function is invoked at subsequent rows with
   all-nonnull input values.
   This is handy for implementing aggregates like <function>max</function>.
   Note that this behavior is only available when
   <replaceable class="PARAMETER">state_data_type</replaceable>
   is the same as the first
   <replaceable class="PARAMETER">input_data_type</replaceable>.
   When these types are different, you must supply a nonnull initial
   condition or use a nonstrict transition function.
  </para>

<!## PG>
  <para>
   If the state transition function is not strict, then it will be called
   unconditionally at each input row, and must deal with null inputs
   and null transition values for itself.  This allows the aggregate
   author to have full control over the aggregate's handling of null values.
  </para>
<!## end>
<!## XC>
&xconly;
  <para>
   If the state transition and/or collection function is not strict, then it
   will be called unconditionally at each input row, and must deal with null
   inputs and null transition/collection values for itself.  This allows the
   aggregate author to have full control over the aggregate's handling of null
   values.
  </para>
<!## end>

  <para>
   If the final function is declared <quote>strict</quote>, then it will not
   be called when the ending state value is null; instead a null result
   will be returned automatically.  (Of course this is just the normal
   behavior of strict functions.)  In any case the final function has
   the option of returning a null value.  For example, the final function for
   <function>avg</function> returns null when it sees there were zero
   input rows.
  </para>

  <para>
   Aggregates that behave like <function>MIN</> or <function>MAX</> can
   sometimes be optimized by looking into an index instead of scanning every
   input row.  If this aggregate can be so optimized, indicate it by
   specifying a <firstterm>sort operator</>.  The basic requirement is that
   the aggregate must yield the first element in the sort ordering induced by
   the operator; in other words:
<programlisting>
SELECT agg(col) FROM tab;
</programlisting>
   must be equivalent to:
<programlisting>
SELECT col FROM tab ORDER BY col USING sortop LIMIT 1;
</programlisting>
   Further assumptions are that the aggregate ignores null inputs, and that
   it delivers a null result if and only if there were no non-null inputs.
   Ordinarily, a data type's <literal>&lt;</> operator is the proper sort
   operator for <function>MIN</>, and <literal>&gt;</> is the proper sort
   operator for <function>MAX</>.  Note that the optimization will never
   actually take effect unless the specified operator is the <quote>less
   than</quote> or <quote>greater than</quote> strategy member of a B-tree
   index operator class.
  </para>
 </refsect1>

 <refsect1>
  <title>Parameters</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">name</replaceable></term>
    <listitem>
     <para>
      The name (optionally schema-qualified) of the aggregate function
      to create.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">input_data_type</replaceable></term>
    <listitem>
&common;
     <para>
      An input data type on which this aggregate function operates.
      To create a zero-argument aggregate function, write <literal>*</>
      in place of the list of input data types.  (An example of such an
      aggregate is <function>count(*)</function>.)
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">base_type</replaceable></term>
    <listitem>
&common;
     <para>
      In the old syntax for <command>CREATE AGGREGATE</>, the input data type
      is specified by a <literal>basetype</> parameter rather than being
      written next to the aggregate name.  Note that this syntax allows
      only one input parameter.  To define a zero-argument aggregate function,
      specify the <literal>basetype</> as
      <literal>"ANY"</> (not <literal>*</>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">sfunc</replaceable></term>
    <listitem>
&common;
     <para>
      The name of the state transition function to be called for each
      input row.  For an <replaceable class="PARAMETER">N</>-argument
      aggregate function, the <replaceable class="PARAMETER">sfunc</>
      must take <replaceable class="PARAMETER">N</>+1 arguments,
      the first being of type <replaceable
      class="PARAMETER">state_data_type</replaceable> and the rest
      matching the declared input data type(s) of the aggregate.
      The function must return a value of type <replaceable
      class="PARAMETER">state_data_type</replaceable>.  This function
      takes the current state value and the current input data value(s),
      and returns the next state value.
     </para>
    </listitem>
   </varlistentry>

<!## XC>
   <varlistentry>
    <term><replaceable class="PARAMETER">cfunc</replaceable></term>
    <listitem>
&xconly;     
     <para>
      The name of the state collection function to be called for each
      input row.  The <replaceable class="PARAMETER">sfunc</> must
      take <replaceable class="PARAMETER">2 arguments</replaceable>, both of them
      being of
      type <replaceable class="PARAMETER">state_data_type</replaceable>.
      The function must return a value of
      type <replaceable class="PARAMETER">state_data_type</replaceable>.
      This function takes the current collection state value and the
      current transition value, and returns the next collection state
      value.  If cfunc is omitted for an aggregate, the two phase
      aggregation mode is used for that aggregate. All the aggregates
      involed in a query use the same aggregation mode.
     </para>
    </listitem>
   </varlistentry>
<!## end>

   <varlistentry>
    <term><replaceable class="PARAMETER">state_data_type</replaceable></term>
    <listitem>
     <para>
      The data type for the aggregate's state value.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">ffunc</replaceable></term>
    <listitem>
&common;
     <para>
      The name of the final function called to compute the aggregate's
      result after all input rows have been traversed.  The function
      must take a single argument of type <replaceable
      class="PARAMETER">state_data_type</replaceable>.  The return
      data type of the aggregate is defined as the return type of this
      function.  If <replaceable class="PARAMETER">ffunc</replaceable>
      is not specified, then the ending state value is used as the
      aggregate's result, and the return type is <replaceable
      class="PARAMETER">state_data_type</replaceable>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">initial_condition</replaceable></term>
    <listitem>
&common;
     <para>
      The initial setting for the state value.  This must be a string
      constant in the form accepted for the data type <replaceable
      class="PARAMETER">state_data_type</replaceable>.  If not
      specified, the state value starts out null.
     </para>
    </listitem>
   </varlistentry>

<!## XC>
   <varlistentry>
    <term><replaceable class="PARAMETER">initial_collection_condition</replaceable></term>
    <listitem>
&xconly;
     <para>
      The initial setting for the state collection value.  This must
      be a string constant in the form accepted for the data
      type <replaceable class="PARAMETER">state_data_type</replaceable>.
      If not specified, the collection state value starts out null. If
      the collection
      function <replaceable class="PARAMETER">cfunc</replaceable> is
      not supplied, this parameter is stored but not used.
     </para>
    </listitem>
   </varlistentry>
<!## end>

   <varlistentry>
    <term><replaceable class="PARAMETER">sort_operator</replaceable></term>
    <listitem>
&common;
     <para>
      The associated sort operator for a <function>MIN</>- or
      <function>MAX</>-like aggregate.
      This is just an operator name (possibly schema-qualified).
      The operator is assumed to have the same input data types as
      the aggregate (which must be a single-argument aggregate).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   The parameters of <command>CREATE AGGREGATE</command> can be
   written in any order, not just the order illustrated above.
  </para>
 </refsect1>

 <refsect1>
  <title>Examples</title>

  <para>
   See <xref linkend="xaggr">.
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibility</title>

&common;
  <para>
   <command>CREATE AGGREGATE</command> is a
<!## PG>
   <productname>PostgreSQL</productname> language extension.  The SQL
<!## end>
<!## XC>
   <productname>Postgres-XC</productname> language extension.  The SQL
<!## end>
   standard does not provide for user-defined aggregate functions.
  </para>
 </refsect1>

 <refsect1>
  <title>See Also</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alteraggregate"></member>
   <member><xref linkend="sql-dropaggregate"></member>
  </simplelist>
 </refsect1>
</refentry>
