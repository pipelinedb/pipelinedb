#! /usr/bin/python3

import argparse
import os
import subprocess
import signal
import socket
import sys
import time


DATA_DIR = 'data'


def _kill(sig):
  out, err = subprocess.Popen(['ps', 'x'],
                              stdout=subprocess.PIPE).communicate()
  errprocs = []
  for line in out.split('\n'):
    if __file__ not in line and 'pipelinedb:' in line:
      pid = line.split()[0]
      try:
        os.kill(int(pid), sig)
      except OSError:
        pass # It might already be dead so just ignore the exception


def handle_sigint(sig, frame):
  """
  Ctrl+C
  """
  _kill(signal.SIGTERM)

signal.signal(signal.SIGINT, handle_sigint)


def main(args):
  if args.root is None:
    p = subprocess.Popen(['pg_config', '--bindir'], stdout=subprocess.PIPE)
    out, _ = p.communicate()
    if p.returncode == 0:
      args.root = os.path.abspath(os.path.join(out.strip(), b'..'))

  if args.root is None:
    print('Could not find root PipelineDB installation directory. Specify it with the --root option.')
    sys.exit(1)

  root = os.path.expandvars(args.root)
  root = os.path.expanduser(root)

  # Make sure we've already bootstrapped
  if not os.path.exists(os.path.join(root, b'data')):
    print ('Root directory %s not bootstrapped. Did you run `make bootstrap`?'
           % root)
    sys.exit(1)

  # Make sure that there are no PipelineDB processes already running
  out, err = subprocess.Popen(['ps', 'x'],
                              stdout=subprocess.PIPE).communicate()
  errprocs = []
  for line in out.splitlines():
    line=line.decode("utf-8")
    if __file__ not in line and 'pipelinedb:' in line:
      errprocs.append(line)

  if errprocs:
    print('The following processes must be terminated before running PipelineDB:')
    for p in errprocs:
      print( p)
    sys.exit(1)

  server = os.path.join(args.root, b'bin', b'postgres')
  cmd = [server, '-D' , os.path.join(root.decode("utf-8"), DATA_DIR), '-p', args.port,
        '-c', 'pipelinedb.stream_insert_level=sync_commit',
        '-c', 'pipelinedb.anonymous_update_checks=off',
        '-c', 'shared_preload_libraries=pipelinedb',
        '-c', "log_line_prefix=[%p] ",
        '-c', 'max_worker_processes=128',
        '-c', 'max_parallel_workers_per_gather=8']

  for guc in args.gucs or []:
    if len(guc.split('=')) != 2:
      print( 'Invalid GUC parameter: %s' % guc)
      sys.exit(1)
    cmd.extend(['-c', guc])

  postmaster = subprocess.Popen(cmd)
  if args.stmts:
    time.sleep(0.5)
    for stmt in args.stmts:
      p = subprocess.Popen(['psql', '-c', stmt], stdout=subprocess.PIPE)
      print( stmt.upper())

  postmaster.wait()


if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--root', action='store', dest='root', required=False,
                      help='Root directory in which PipelineDB is installed')
  parser.add_argument('--stmt', action='append', dest='stmts', required=False,
                      help='SQL statements to run after all daemons are running')
  parser.add_argument('--port', action='store', dest='port', required=False,
                      default='5432', help='Server port to connect to')
  parser.add_argument('-c', action='append', dest='gucs', required=False,
                      help='GUC parameters to pass to the postmaster')
  args = parser.parse_args()
  main(args)
