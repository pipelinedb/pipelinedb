#!/usr/bin/env ruby

# generates data to test the adhoc query client

require 'pp'

Signal.trap("SIGPIPE", "SYSTEM_DEFAULT")
Signal.trap("SIGINT", "SYSTEM_DEFAULT")

i = 0
srand(0)

home=ENV['HOME']

$w = ["cupped", "bebotch", "retroactive", "unveiler", "inkwriter", "cocksureism", "dualistic", "pyramidion", "stipula",
 "preliquidate", "semifashion", "previous", "amgarn", "snell", "bootlessness", "supplicate", "carboxylase",
 "seerpaw", "stipe", "starboard", "scleroparei", "milvus", "itacolumite", "agile", "reavoid", "hyperurbanism",
 "cancerism", "vesiculopustular", "perchloroethane", "spasmolytic", "cytozoon", "thymelical", "trustify",
 "resumption", "electromyographic", "unreversed", "bibliogenesis", "caresser", "kukulcan", "percussiveness",
 "sonancy", "bedur", "repetitionary", "nondiscordant", "bradypus", "patristic", "untruck", "cloakmaking",
 "longobardian", "anthela", "triphony", "flandan", "phylloxera", "remissively", "canting", "sensatorial",
 "enstatolite", "abietene", "mesmerian", "maidservant", "valedictorian", "indris", "sickle", "legislative",
 "squirt", "gait", "hemiamb", "flustrum", "eaglet", "cypress", "reddy", "spheniscus", "spina", "brehon", "foundery",
 "constance", "alencon", "ungingled", "lungflower", "vedika", "dialogize", "counterenergy", "discanonize", "axoidean",
 "uncomplicated", "overvehement", "creekside", "rimy", "enlightened", "gaspy", "frigidarium", "inconspicuousness", "mactation",
 "ployment", "ropeway", "abed", "femorocele", "clithral", "rollichie", "skite", "delegate"]

def randword
	$w.sample
end

$u = File.open("/dev/urandom")

def randstring
	$u.read(8).unpack('H*')
end

keys = {}

# msg types
#
# h = header row
# i = insert
# u = update
# d = delete
# k = key

DELIM = "\t"

def escape(x)
	# XXX - this is very basic
	x.sub(/\n/, "\\n")
end

def output(a)
	puts a.map{|x| escape(x.to_s)}.join(DELIM)
	STDOUT.flush
end

output %w[header name value volume foo ts]
output %w[key 1]

# pq_flush

while (true) do

	(1..500).each {|i|

		k1 = randword
		k2 = sprintf("%04d", rand(10))

		k = [k1 + "\n" + k2];
#		k = [k1,k2];
		t = keys.include?(k) ? 'update' : 'insert'
		output([t,k[0],k2,"x" * (rand(10) + 1),rand(100),Time.now.to_i])

		keys[k] = 1
		STDOUT.flush

		sleep(0.01)
	}

	(1..500).each {|i|

		if (keys.empty?)
			break
		end

		k = keys.keys.sample

		keys.delete(k)

		output(["delete"] + k)
		STDOUT.flush
		sleep(0.01)
	}
end
