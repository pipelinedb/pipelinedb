#! /usr/bin/python

import argparse
import os
import shutil
import subprocess
import time
import getpass
import signal
import sys


DATA_DIR = 'data'


def main(args):
    root = os.path.expandvars(args.root)
    if not os.path.exists(root):
        print 'Root directory %s does not exist. Did you run `make install`?' % root
        sys.exit(1)

    root = os.path.expanduser(root)
    data_dir = os.path.join(root, DATA_DIR)

    os.path.exists(data_dir) and shutil.rmtree(data_dir)
    try:
        subprocess.call(['pipeline-init', '-D', data_dir])
    except OSError:
        print 'Looks like you forgot to add your PATH? Run the next line and `make bootstrap` again'
        print '    export PATH=%s/bin:$PATH' % root
        sys.exit(1)

    proc = subprocess.Popen(['pipeline-server', '-D', data_dir])
    time.sleep(1)

    user = getpass.getuser()
    try:
      subprocess.check_call(['pipeline', 'pipeline', '-c',
                             'CREATE DATABASE %s' % user])
    except subprocess.CalledProcessError:
      print 'It seems like PipelineDB failed to start up. Make sure nothing else is running on port 5432, maybe you have an instance of PostgreSQL or PipelineDB already running?'
      sys.exit(1)

    subprocess.call(['pipeline', user, '-c', 'ACTIVATE'])
    time.sleep(0.1)

    # Cleanup daemons
    os.kill(proc.pid, signal.SIGINT)
    time.sleep(0.1)

    print """\nPipelineDB successfully bootstrapped.
Run with `make run`.'"""


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--root', action='store', dest='root', required=True,
                        help='Root directory in which to create the cluster')
    args = parser.parse_args()
    main(args)
