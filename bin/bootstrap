#! /usr/bin/python3

import argparse
import os
import shutil
import subprocess
import time
import getpass
import signal
import sys


def main(args):
    if args.root is None:
      p = subprocess.Popen(['pg_config', '--bindir'], stdout=subprocess.PIPE)
      out, _ = p.communicate()
      if p.returncode == 0:
        args.root = os.path.abspath(os.path.join(out.strip(), b'..'))

    root = os.path.expandvars(args.root)
    if not os.path.exists(root):
        print('Root directory %s does not exist. Did you run `make install`?' % root)
        sys.exit(1)
    root = os.path.expanduser(root)
    print(os.path.join(root, b'data'))
    data_dir = os.path.join(root, b'data')

    os.path.exists(data_dir) and shutil.rmtree(data_dir)
    try:
        subprocess.call(['initdb', '-D', data_dir])
    except OSError:
        print('Looks like you forgot to add your PATH? Run the next line and `make bootstrap` again')
        print('    export PATH=%s/bin:$PATH' % root)
        sys.exit(1)

    proc = subprocess.Popen(['postgres', '-D', data_dir, '-c', 'log_line_prefix='])
    time.sleep(1)

    user = getpass.getuser()
    try:
      subprocess.check_call(['psql', 'postgres', '-c',
                             'CREATE DATABASE %s' % user])
    except subprocess.CalledProcessError:
      print('It seems like PostgreSQL failed to start up. Make sure nothing else is running on port 5432, maybe you have an instance of PostgreSQL already running?')
      sys.exit(1)

    subprocess.call(['psql', user, '-c', 'DROP DATABASE postgres'])
    subprocess.call(['psql', user, '-c', 'CREATE EXTENSION pipelinedb'])
    time.sleep(0.1)

    # Cleanup daemons
    os.kill(proc.pid, signal.SIGINT)
    time.sleep(0.1)

    print("""\nPipelineDB successfully bootstrapped.
Run with `make run`.'""")


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--root', action='store', dest='root', help='Root directory in which to create the database')
    args = parser.parse_args()
    main(args)
