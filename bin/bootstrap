#! /usr/bin/python

import argparse
import os
import shutil
import subprocess
import time
import getpass
import signal
import sys


DATA_DIR = 'data'


def main(args):
    root = os.path.expandvars(args.root)
    if not os.path.exists(root):
        print 'Root directory %s does not exist. Did you run `make install`?' % root
        sys.exit(1)

    gis = os.path.join(root, 'share', 'pipelinedb', 'extension', 'postgis.control')
    if not os.path.exists(gis):
        print 'GIS has not been installed. Did you run `make install` from the GIS root (probably src/gis)?'
        sys.exit(1)

    root = os.path.expanduser(root)
    data_dir = os.path.join(root, DATA_DIR)

    os.path.exists(data_dir) and shutil.rmtree(data_dir)
    subprocess.call(['pipeline-init', '-D', data_dir])

    procs = []
    procs.append(subprocess.Popen(['pipeline-server', '-D', data_dir]))
    time.sleep(1)

    user = getpass.getuser()
    subprocess.call(['pipeline', 'pipeline', '-c', 'CREATE DATABASE %s' % user])
    time.sleep(0.1)

    # Cleanup daemons
    for proc in procs:
        os.kill(proc.pid, signal.SIGINT)
        time.sleep(0.1)

    print """\nPipelineDB successfully bootstrapped.
Run with `make run`.'"""


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--root', action='store', dest='root', required=True,
                        help='Root directory in which to create the cluster')
    args = parser.parse_args()
    main(args)
