#! /usr/bin/python

from optparse import OptionParser
import subprocess
import os
import time
import re


DATANODE_DIR = 'datanode'
COORDINATOR_DIR = 'coordinator'
GTM_DIR = 'gtm_data'
DIRS = (DATANODE_DIR, COORDINATOR_DIR, GTM_DIR)


def _needs_bootstrap(pgxc_root):
	pgxc_dirs = None
	try:
		pgxc_dirs = os.listdir(pgxc_root)
	except OSError as e:
		# Nothing there
		return True
	for d in DIRS:
		if d not in pgxc_dirs:
			return True
	return False


def _bootstrap(pgxc_root):
	# Init GTM
	bin_root = os.path.join(pgxc_root, 'bin')
	initgtm = os.path.join(bin_root, 'initgtm')
	gtm_path = os.path.join(pgxc_root, GTM_DIR)
	if not os.path.exists(gtm_path):
		subprocess.call([initgtm, 
						'-Z', 'gtm',
						'-D', gtm_path])
	else:
		print 'GTM path exists at %s, not bootstrapping GTM' % gtm_path
	
	initdb = os.path.join(bin_root, 'initdb')
	
	# Init coordinator
	coordinator_path = os.path.join(pgxc_root, COORDINATOR_DIR)
	if not os.path.exists(coordinator_path):
		subprocess.call([initdb, '--nodename=coordinator', coordinator_path])
	else:
		print 'Coordinator path exists at %s, not bootstrapping Coordinator' % coordinator_path
		
	# Init datanode
	datanode_path = os.path.join(pgxc_root, DATANODE_DIR)
	if not os.path.exists(datanode_path):
		subprocess.call([initdb, '--nodename=datanode', datanode_path])
	else:
		print 'Datanode path exists at %s, not bootstrapping Datanode' % datanode_path
		

def _cleanup(data_dir, base_cmd):
	paths = os.listdir(data_dir)
	for p in paths:
		if '.pid' in p:
			print '%s found, stopping process...' % p
			subprocess.call(base_cmd + ['stop'])

def _datanode_exists(psql):
	cmd = [psql, 'postgres', '-c', "SELECT * FROM pgxc_node WHERE node_type = 'D'"]
	proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
	output = proc.stdout.read()
	
	# Ghetto check for any returned rows
	return 'datanode' in output

			
def _create_datanode(pgxc_root):
	psql = os.path.join(pgxc_root, 'bin', 'psql')
	if _datanode_exists(psql):
		return
	
	print 'No Datanode in database, creating...'
	cmd = [psql, 'postgres', '-c', 'CREATE NODE datanode WITH (TYPE=DATANODE, HOST=LOCALHOST, PORT=5431);']
	subprocess.call(cmd)
	
	if not _datanode_exists(psql):
		raise Exception('Could not create Datanode in database')


def main(options, action):
	
	if options.bootstrap or _needs_bootstrap(options.pgxc_root):
		_bootstrap(options.pgxc_root)

	pgxc_root = options.pgxc_root

	if action == 'ls':
		proc = subprocess.Popen(['ps', 'aux'], stdout=subprocess.PIPE)
		procs = proc.stdout.read().split('\n')
		for p in procs:
			if pgxc_root in p:
				tup = re.split('\s+', p)
				pid = tup[1]
				cmd = ' '.join(tup[10:])
				print pid, cmd
		return
		
	pg_ctl = os.path.join(pgxc_root, 'bin', 'pg_ctl')
	gtm_ctl = os.path.join(options.pgxc_root, 'bin', 'gtm_ctl')
	if options.gtm:
		gtm_path = os.path.join(pgxc_root, GTM_DIR)
		log_path = os.path.join(pgxc_root, 'gtm.log')
		base_cmd = [gtm_ctl, '-D', gtm_path,
						'-Z', 'gtm',
						'-l', log_path]
		if action == 'stop':
			print 'Stopping GTM...'
			_cleanup(gtm_path, base_cmd)
		elif action == 'start':
			print 'Starting GTM...'
			cmd = base_cmd + ['start']
			print ' '.join(cmd)
			subprocess.call(cmd)
			print 'Started GTM, logging to %s' % log_path
	if options.coordinator:
		log_path = os.path.join(pgxc_root, 'coordinator.log')
		coordinator_path = os.path.join(pgxc_root, COORDINATOR_DIR)
		base_cmd = [pg_ctl, '-D', coordinator_path,
						'-Z', 'coordinator',
						'-l', log_path]
		if action == 'stop':
			print 'Stopping Coordinator...'
			_cleanup(coordinator_path, base_cmd)
		elif action == 'start':
			print 'Starting Coordinator...'
			cmd = base_cmd + ['start']
			print ' '.join(cmd)
			subprocess.call(cmd)
			print 'Started Coordinator, logging to %s' % log_path
			
			# Wait for daemons to settle
			time.sleep(5)		
			_create_datanode(pgxc_root)				
	if options.datanode:
		log_path = os.path.join(pgxc_root, 'datanode.log')
		datanode_path = os.path.join(pgxc_root, DATANODE_DIR)
		base_cmd = [pg_ctl, '-D', datanode_path,
						'-Z', 
						'datanode',
						'-l', log_path,
						'-o', '"-p 5431"']
		if action == 'stop':
			print 'Stopping Datanode...'
			_cleanup(datanode_path, base_cmd)
		elif action == 'start':
			print 'Starting Datanode...'
			cmd = base_cmd + ['start']
			print ' '.join(cmd)
			subprocess.call(cmd)
			print 'Started Datanode, logging to %s' % log_path
			
	
if __name__ == '__main__':
	parser = OptionParser()
	parser.add_option('--bootstrap', action='store_true', dest='bootstrap', help='ionitialize all daemon data and directories')
	parser.add_option('--gtm', action='store_true', dest='gtm', help='start a GTM process')
	parser.add_option('--coordinator', action='store_true', dest='coordinator', help='start a Coordinator process')
	parser.add_option('--datanode', action='store_true', dest='datanode', help='start a Datanode process')
	parser.add_option('--pgxc_root', dest='pgxc_root', default='~/tmp/pgxc', help='root directory for PGXC daemon data')
	options, args = parser.parse_args()
	options.pgxc_root = os.path.expanduser(options.pgxc_root)

	action = args[0]
	main(options, action)