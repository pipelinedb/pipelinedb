# ----------
# src/test/regress/parallel_schedule
#
# By convention, we put no more than twenty tests in any one parallel group;
# this limits the number of connections needed to run the tests.
# ----------

# run tablespace by itself, and first, because it forces a checkpoint;
# we'd prefer not to have checkpoints later in the tests because that
# interferes with crash-recovery testing.
test: tablespace

# ----------
# The first group of parallel tests
# ----------
test: boolean char name varchar text int2 int4 int8 oid float4 float8 bit numeric txid uuid enum money rangetypes pg_lsn regproc

# Depends on things setup during char, varchar and text
test: strings
# Depends on int2, int4, int8, float4, float8
test: numerology

# ----------
# The second group of parallel tests
# ----------
test: point lseg line box path polygon circle date time timetz timestamp timestamptz interval abstime reltime tinterval inet macaddr tstypes comments

# ----------
# Another group of parallel tests
# geometry depends on point, lseg, box, path, polygon and circle
# horology depends on interval, timetz, timestamp, timestamptz, reltime and abstime
# ----------
test: geometry horology regex oidjoins type_sanity
#test:  opr_sanity

# ----------
# These four each depend on the previous one
# ----------
test: insert
test: create_function_1
test: create_type
test: create_table
test: create_function_2

# ----------
# Load huge amounts of data
# We should split the data files into single files and then
# execute two copy tests parallel, to check that copy itself
# is concurrent safe.
# ----------
test: copy copyselect

# ----------
# More groups of parallel tests
# ----------
test: create_misc create_operator
# These depend on the above two
test: create_index create_view

# ----------
# Another group of parallel tests
# ----------
test: create_aggregate create_function_3 create_cast constraints triggers inherit create_table_like typed_table vacuum drop_if_exists updatable_views

# ----------
# sanity_check does a vacuum, affecting the sort order of SELECT *
# results. So it should not run parallel to other tests.
# ----------
test: sanity_check

# ----------
# Believe it or not, select creates a table, subsequent
# tests need.
# ----------
test: errors
test: select
ignore: random

# ----------
# Another group of parallel tests
# ----------
test: select_into select_distinct select_distinct_on select_implicit select_having subselect union case join aggregates transactions random portals arrays btree_index hash_index update namespace prepared_xacts delete

# ----------
# Another group of parallel tests
# ----------
test: privileges security_label collate matview lock replica_identity

# ----------
# Another group of parallel tests
# ----------
test: alter_generic misc psql async

# rules cannot run concurrently with any test that creates a view
test: rules
# event triggers cannot run concurrently with any test that runs DDL
test: event_trigger

# ----------
# Another group of parallel tests
# ----------
test: select_views portals_p2 foreign_key cluster dependency guc bitmapops combocid tsearch tsdicts foreign_data window xmlmap functional_deps advisory_lock json jsonb indirect_toast equivclass
# ----------
# Another group of parallel tests
# NB: temp.sql does a reconnect which transiently uses 2 connections,
# so keep this parallel group to at most 19 tests
# ----------
test: plancache limit plpgsql copy2 temp domain rangefuncs prepare without_oid conversion truncate alter_table sequence polymorphism rowtypes returning largeobject with xml

# run stats by itself because its delay may be insufficient under heavy load
test: stats

# ----------
# Another group of parallel tests
# ----------
test: pipeline_stream

# ----------
# Another group of parallel tests
# ----------
test: sw_vacuum

# ----------
# Another group of parallel tests
# ----------
test: analyze_cont_view create_cont_view cont_view_sanity cont_window

# ----------
# Another group of parallel tests
# ----------
test: cont_sum cont_sw_sum cont_avg cont_sw_avg cont_count

# ----------
# Another group of parallel tests
# ----------
test: cont_bool_agg cont_min_max cont_object_agg cont_regr cont_stats

# ----------
# Another group of parallel tests
# ----------
test: cont_sw_bool_agg cont_sw_min_max cont_sw_object_agg cont_sw_regr cont_sw_stats

# ----------
# Another group of parallel tests
# ----------
test: cont_hs_agg cont_sw_hs_agg cont_distinct cont_hll_agg cont_os_agg cont_sw_os_agg cont_sw_count

# ----------
# Another group of parallel tests
# ----------
test: stream_table_join user_combine cont_limit cont_alter stream_targets hash_group date_floor stream_insert_subselect

# ----------
# Another group of parallel tests
# ----------
test: stream_exprs schema_inference prepared_stream_insert cont_view_tablespace typed_streams cont_subselect

# These are run in serial because they each activate many CVs.
# If they are run in parallel the CPU can potentially get starved.
test: stream_casts0
test: stream_casts1
test: stream_casts2
test: stream_casts3
test: stream_casts4

# ----------
# Another group of parallel tests
# ----------
test: cont_gis_geom cont_gis_raster cont_view_namespace cont_complex_types cont_explain

# ----------
# Another group of parallel tests
# ----------
test: cont_activate

# ----------
# Another group of parallel tests
# ----------
test: create_combinable_agg pipeline_regress cont_fss_agg

# ----------
# Another group of parallel tests
# ----------
test: pipeline_stats
