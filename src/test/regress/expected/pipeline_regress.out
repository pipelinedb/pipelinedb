CREATE STREAM test_stream (
  ts TIMESTAMP (0) WITH TIME ZONE,
  foobar TEXT
);
CREATE CONTINUOUS VIEW test_view AS
  SELECT
    SECOND(ts) AS secondstamp,
    foobar,
    COUNT(*) AS count
  FROM test_stream
  WHERE (SECOND(arrival_timestamp) > clock_timestamp() - interval '7 day')
  GROUP BY
    secondstamp,
    foobar;
INSERT INTO test_stream (foobar, ts) VALUES ('foo', clock_timestamp()), ('foo', clock_timestamp());
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

INSERT INTO test_stream (foobar, ts) VALUES ('foo', clock_timestamp()), ('bar', clock_timestamp());
SELECT foobar, count FROM test_view ORDER BY secondstamp, foobar;
 foobar | count 
--------+-------
 foo    |     2
 bar    |     1
 foo    |     1
(3 rows)

DROP CONTINUOUS VIEW test_view;
DROP STREAM test_stream;
CREATE CONTINUOUS VIEW test_view AS
  SELECT
    user_id::int,
    page_id::int,
    arrival_timestamp as ts
  FROM test_stream
  WHERE arrival_timestamp >= ( clock_timestamp() - interval '90 minutes' );
NOTICE:  window width is "90 minutes" with a step size of "1 minute"
HINT:  Use a datetime truncation function to explicitly set the step size.
INSERT INTO test_stream (user_id, page_id) VALUES (1, 1);
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

INSERT INTO test_stream (user_id, page_id) VALUES (2, 2);
SELECT user_id, page_id FROM test_view ORDER BY ts;
 user_id | page_id 
---------+---------
       1 |       1
       2 |       2
(2 rows)

DROP CONTINUOUS VIEW test_view;
CREATE OR REPLACE FUNCTION arrival_timestamp()
RETURNS timestamptz AS
$$
BEGIN
  RETURN timestamp '2000-01-01 00:00:00';
END;
$$
LANGUAGE 'plpgsql' IMMUTABLE;
CREATE CONTINUOUS VIEW test_view AS
  SELECT arrival_timestamp FROM test_stream
  WHERE arrival_timestamp > clock_timestamp() - interval '1 hour';
NOTICE:  window width is "1 hour" with a step size of "1 second"
HINT:  Use a datetime truncation function to explicitly set the step size.
INSERT INTO test_stream (x) VALUES (NULL);
INSERT INTO test_stream (x) VALUES (NULL);
SELECT COUNT(*) FROM test_view;
 count 
-------
     2
(1 row)

DROP CONTINUOUS VIEW test_view;
DROP FUNCTION arrival_timestamp();
CREATE CONTINUOUS VIEW test_view AS
  SELECT ((id::integer)::numeric + avg(id::integer)) AS x
  FROM test_stream
  GROUP BY id::integer;
INSERT INTO test_stream (id) VALUES (1), (2), (3);
SELECT * FROM test_view ORDER BY x;
           x            
------------------------
 2.00000000000000000000
     4.0000000000000000
     6.0000000000000000
(3 rows)

DROP CONTINUOUS VIEW test_view;
CREATE CONTINUOUS VIEW test_view AS
  SELECT id::integer + avg(id) AS x, SUM(x::float8)
  FROM test_stream
  GROUP BY id;
\d+ test_view_mrel0;
                        Table "public.test_view_mrel0"
 Column |       Type       | Modifiers | Storage  | Stats target | Description 
--------+------------------+-----------+----------+--------------+-------------
 _0     | integer          |           | plain    |              | 
 _1     | bigint[]         |           | extended |              | 
 sum    | double precision |           | plain    |              | 
Indexes:
    "test_view_mrel0_expr_idx" btree (hash_group(_0))
Options: fillfactor=50

INSERT INTO test_stream (id, x) VALUES (1, 1.5), (2, 3.0), (3, 4.5);
SELECT * FROM test_view ORDER BY x;
           x            | sum 
------------------------+-----
 2.00000000000000000000 | 1.5
     4.0000000000000000 |   3
     6.0000000000000000 | 4.5
(3 rows)

DROP CONTINUOUS VIEW test_view;
CREATE CONTINUOUS VIEW test_view AS
SELECT
  second(arrival_timestamp),
  COUNT(*)
FROM
  stream
WHERE
  (minute(arrival_timestamp) > clock_timestamp() - interval '10 minute')
GROUP BY second;
INSERT INTO stream (x) VALUES (1), (1);
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

INSERT INTO stream (x) VALUES (1), (1);
SELECT count FROM test_view_mrel0;
 count 
-------
     2
     2
(2 rows)

SELECT count FROM test_view;
 count 
-------
     2
     2
(2 rows)

DROP CONTINUOUS VIEW test_view;
