CREATE STREAM test_stream (
  ts TIMESTAMP (0) WITH TIME ZONE,
  foobar TEXT
);
CREATE CONTINUOUS VIEW test_view AS
  SELECT
    SECOND(ts) AS secondstamp,
    foobar,
    COUNT(*) AS count
  FROM test_stream
  WHERE (arrival_timestamp > clock_timestamp() - interval '7 day')
  GROUP BY
    secondstamp,
    foobar;
INSERT INTO test_stream (foobar, ts) VALUES ('foo', clock_timestamp()), ('foo', clock_timestamp());
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

INSERT INTO test_stream (foobar, ts) VALUES ('foo', clock_timestamp()), ('bar', clock_timestamp());
SELECT foobar, count FROM test_view ORDER BY secondstamp, foobar;
 foobar | count 
--------+-------
 foo    |     2
 bar    |     1
 foo    |     1
(3 rows)

DROP CONTINUOUS VIEW test_view;
DROP STREAM test_stream;
CREATE STREAM test_stream (user_id int, page_id int);
CREATE CONTINUOUS VIEW test_view AS
  SELECT
    user_id::int,
    page_id::int,
    arrival_timestamp as ts
  FROM test_stream
  WHERE arrival_timestamp >= ( clock_timestamp() - interval '90 minutes' );
INSERT INTO test_stream (user_id, page_id) VALUES (1, 1);
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

INSERT INTO test_stream (user_id, page_id) VALUES (2, 2);
SELECT user_id, page_id FROM test_view ORDER BY ts;
 user_id | page_id 
---------+---------
       1 |       1
       2 |       2
(2 rows)

DROP CONTINUOUS VIEW test_view;
DROP STREAM test_stream CASCADE;
CREATE OR REPLACE FUNCTION arrival_timestamp()
RETURNS timestamptz AS
$$
BEGIN
  RETURN timestamp '2000-01-01 00:00:00';
END;
$$
LANGUAGE 'plpgsql' IMMUTABLE;
CREATE STREAM test_stream (x int);
CREATE CONTINUOUS VIEW test_view AS
  SELECT arrival_timestamp FROM test_stream
  WHERE arrival_timestamp > clock_timestamp() - interval '1 hour';
INSERT INTO test_stream (x) VALUES (NULL);
INSERT INTO test_stream (x) VALUES (NULL);
SELECT COUNT(*) FROM test_view;
 count 
-------
     2
(1 row)

DROP CONTINUOUS VIEW test_view;
DROP STREAM test_stream CASCADE;
DROP FUNCTION arrival_timestamp();
CREATE STREAM test_stream (id int, x float8);
CREATE CONTINUOUS VIEW test_view AS
  SELECT ((id::integer)::numeric + avg(id::integer)) AS x
  FROM test_stream
  GROUP BY id::integer;
INSERT INTO test_stream (id) VALUES (1), (2), (3);
SELECT * FROM test_view ORDER BY x;
           x            
------------------------
 2.00000000000000000000
     4.0000000000000000
     6.0000000000000000
(3 rows)

DROP CONTINUOUS VIEW test_view;
CREATE CONTINUOUS VIEW test_view AS
  SELECT id::integer + avg(id) AS x, SUM(x::float8)
  FROM test_stream
  GROUP BY id;
\d+ test_view_mrel;
                         Table "public.test_view_mrel"
 Column |       Type       | Modifiers | Storage  | Stats target | Description 
--------+------------------+-----------+----------+--------------+-------------
 _0     | integer          |           | plain    |              | 
 _1     | bigint[]         |           | extended |              | 
 sum    | double precision |           | plain    |              | 
 $pk    | bigint           | not null  | plain    |              | 
Indexes:
    "test_view_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "test_view_mrel_expr_idx" btree (hash_group(_0))
Options: fillfactor=50

INSERT INTO test_stream (id, x) VALUES (1, 1.5), (2, 3.0), (3, 4.5);
SELECT * FROM test_view ORDER BY x;
           x            | sum 
------------------------+-----
 2.00000000000000000000 | 1.5
     4.0000000000000000 |   3
     6.0000000000000000 | 4.5
(3 rows)

DROP CONTINUOUS VIEW test_view;
DROP STREAM test_stream CASCADE;
CREATE STREAM test_stream (x int);
CREATE CONTINUOUS VIEW test_view AS
SELECT
  second(arrival_timestamp),
  COUNT(*)
FROM
  test_stream
WHERE
  (arrival_timestamp > clock_timestamp() - interval '10 minute')
GROUP BY second;
INSERT INTO test_stream (x) VALUES (1), (1);
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

INSERT INTO test_stream (x) VALUES (1), (1);
SELECT count FROM test_view_mrel;
 count 
-------
     2
     2
(2 rows)

SELECT count FROM test_view;
 count 
-------
     2
     2
(2 rows)

DROP CONTINUOUS VIEW test_view;
DROP STREAM test_stream CASCADE;
CREATE STREAM test_stream (uid bigint);
CREATE CONTINUOUS VIEW test_view AS
  SELECT uid::bigint, COUNT(*)
FROM
  test_stream
GROUP BY uid;
-- Ensure that hashes colide.
SELECT hash_group(13362), hash_group(41950);
 hash_group  | hash_group  
-------------+-------------
 -1818625579 | -1818625579
(1 row)

INSERT INTO test_stream (uid) VALUES (13362);
INSERT INTO test_stream (uid) VALUES (13362);
INSERT INTO test_stream (uid) VALUES (13362);
INSERT INTO test_stream (uid) VALUES (41950);
INSERT INTO test_stream (uid) VALUES (41950);
INSERT INTO test_stream (uid) VALUES (41950);
INSERT INTO test_stream (uid) VALUES (13362);
INSERT INTO test_stream (uid) VALUES (13362);
INSERT INTO test_stream (uid) VALUES (13362);
INSERT INTO test_stream (uid) VALUES (41950);
INSERT INTO test_stream (uid) VALUES (41950);
INSERT INTO test_stream (uid) VALUES (41950);
SELECT * FROM test_view ORDER BY uid;
  uid  | count 
-------+-------
 13362 |     6
 41950 |     6
(2 rows)

DROP CONTINUOUS VIEW test_view;
DROP STREAM test_stream CASCADE;
CREATE STREAM test_stream (x int, y int);
CREATE CONTINUOUS VIEW v AS SELECT x::int, count(*) FROM test_stream;
ERROR:  column "test_stream.x" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: CREATE CONTINUOUS VIEW v AS SELECT x::int, count(*) FROM tes...
                                           ^
CREATE CONTINUOUS VIEW v AS SELECT x::int, y::int, count(*) FROM test_stream GROUP BY x;
ERROR:  column "test_stream.y" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: CREATE CONTINUOUS VIEW v AS SELECT x::int, y::int, count(*) ...
                                                   ^
DROP STREAM test_stream CASCADE;
-- #1357
CREATE FUNCTION jsonb_element_bigint_agg_state(acc jsonb, elem jsonb)
RETURNS jsonb LANGUAGE SQL AS $$
SELECT json_object_agg(key,value)::jsonb
FROM (SELECT key, sum(value) as value
        FROM (SELECT key, value::bigint AS value
                FROM jsonb_each_text(acc)
                UNION ALL
                SELECT key, value::bigint AS value
                FROM jsonb_each_text(elem)) x
        GROUP BY 1) y;
$$;
CREATE AGGREGATE jsonb_element_bigint_agg(jsonb)
(
    stype = jsonb,
    initcond = '{}',
    sfunc = jsonb_element_bigint_agg_state
);
CREATE STREAM jsonb_test_stream (key integer, values jsonb);
CREATE CONTINUOUS VIEW test_json_udf_agg AS SELECT key, jsonb_element_bigint_agg(values) FROM jsonb_test_stream GROUP BY key;
INSERT INTO jsonb_test_stream (key, values) VALUES (1, '{"a": 1}'::jsonb);
INSERT INTO jsonb_test_stream (key, values) VALUES (1, '{"a": 1}'::jsonb);
SELECT * from test_json_udf_agg;
 key | jsonb_element_bigint_agg 
-----+--------------------------
   1 | {"a": 2}
(1 row)

DROP CONTINUOUS VIEW test_json_udf_agg;
DROP AGGREGATE jsonb_element_bigint_agg(jsonb);
DROP FUNCTION jsonb_element_bigint_agg_state(acc jsonb, elem jsonb);
DROP STREAM jsonb_test_stream;
CREATE STREAM sw_ts_expr_s (x int);
CREATE CONTINUOUS VIEW sw_ts_expr1 AS
  SELECT count(*) FROM sw_ts_expr_s
  WHERE minute(arrival_timestamp) + interval '1 second' > clock_timestamp() - interval '5 minute';
CREATE CONTINUOUS VIEW sw_ts_expr2 AS
  SELECT minute(arrival_timestamp), count(*) FROM sw_ts_expr_s
  WHERE minute(arrival_timestamp) > clock_timestamp() - interval '5 minute'
  GROUP BY minute(arrival_timestamp);
\d+ sw_ts_expr1
        Continuous view "public.sw_ts_expr1"
 Column |  Type  | Modifiers | Storage | Description 
--------+--------+-----------+---------+-------------
 count  | bigint |           | plain   | 
View definition:
 SELECT count(*) AS count
   FROM sw_ts_expr_s
  WHERE (minute(arrival_timestamp) + '@ 1 sec'::interval) > (clock_timestamp() - '@ 5 mins'::interval);

\d+ sw_ts_expr2
                 Continuous view "public.sw_ts_expr2"
 Column |           Type           | Modifiers | Storage | Description 
--------+--------------------------+-----------+---------+-------------
 minute | timestamp with time zone |           | plain   | 
 count  | bigint                   |           | plain   | 
View definition:
 SELECT minute(arrival_timestamp) AS minute,
    count(*) AS count
   FROM sw_ts_expr_s
  WHERE minute(arrival_timestamp) > (clock_timestamp() - '@ 5 mins'::interval)
  GROUP BY (minute(arrival_timestamp));

INSERT INTO sw_ts_expr_s (x) VALUES (1), (1);
INSERT INTO sw_ts_expr_s (x) VALUES (1), (1);
SELECT * FROM sw_ts_expr1;
 count 
-------
     4
(1 row)

SELECT count FROM sw_ts_expr2;
 count 
-------
     4
(1 row)

CREATE CONTINUOUS VIEW unknown_type_cv AS SELECT x, 'a' FROM sw_ts_expr_s;
ERROR:  column 2 has an unknown type
HINT:  Explicitly cast the expression to a known type.
CREATE CONTINUOUS VIEW unknown_type_cv AS SELECT x, 'a'::text FROM sw_ts_expr_s;
\d+ unknown_type_cv
       Continuous view "public.unknown_type_cv"
 Column |  Type   | Modifiers | Storage  | Description 
--------+---------+-----------+----------+-------------
 x      | integer |           | plain    | 
 text   | text    |           | extended | 
View definition:
 SELECT x,
    'a'::text AS text
   FROM sw_ts_expr_s;

DROP CONTINUOUS VIEW unknown_type_cv;
CREATE STREAM ct_out_s (x integer, a text);
CREATE VIEW unknown_type_ct WITH (action=transform, outputfunc=pipeline_stream_insert('ct_out_s')) AS
  SELECT x, 'a' FROM sw_ts_expr_s;
ERROR:  column 2 has an unknown type
HINT:  Explicitly cast the expression to a known type.
CREATE VIEW unknown_type_ct WITH (action=transform, outputfunc=pipeline_stream_insert('ct_out_s')) AS
  SELECT x, 'a'::text FROM sw_ts_expr_s;
SELECT pg_get_viewdef('unknown_type_ct');
     pg_get_viewdef      
-------------------------
  SELECT sw_ts_expr_s.x,+
     'a'::text AS text  +
    FROM sw_ts_expr_s;
(1 row)

DROP VIEW unknown_type_ct;
DROP STREAM ct_out_s;
DROP STREAM sw_ts_expr_s CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to continuous view sw_ts_expr1
drop cascades to continuous view sw_ts_expr2
