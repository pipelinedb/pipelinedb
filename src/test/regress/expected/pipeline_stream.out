CREATE CONTINUOUS VIEW ps0 AS SELECT id::integer FROM stream0;
SELECT schema, name, inferred, queries, tup_desc FROM pipeline_streams() ORDER BY name;
 schema |   name    | inferred | queries |                                  tup_desc                                  
--------+-----------+----------+---------+----------------------------------------------------------------------------
 public | ps0_osrel | f        |         | {old::ps0(0),new::ps0(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | stream0   | t        | {ps0}   | {id::numeric,"arrival_timestamp::timestamp(0) with time zone"}
(2 rows)

CREATE CONTINUOUS VIEW ps1 AS SELECT id::integer, val::text FROM stream0;
SELECT schema, name, inferred, queries, tup_desc FROM pipeline_streams() ORDER BY name;
 schema |   name    | inferred |  queries  |                                  tup_desc                                  
--------+-----------+----------+-----------+----------------------------------------------------------------------------
 public | ps0_osrel | f        |           | {old::ps0(0),new::ps0(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps1_osrel | f        |           | {old::ps1(0),new::ps1(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | stream0   | t        | {ps0,ps1} | {id::numeric,val::text,"arrival_timestamp::timestamp(0) with time zone"}
(3 rows)

CREATE CONTINUOUS VIEW ps2 AS SELECT id::float FROM stream0;
CREATE CONTINUOUS VIEW ps3 AS SELECT x::integer, y::timestamp FROM stream1;
SELECT schema, name, inferred, queries, tup_desc FROM pipeline_streams() ORDER BY name;
 schema |   name    | inferred |    queries    |                                            tup_desc                                            
--------+-----------+----------+---------------+------------------------------------------------------------------------------------------------
 public | ps0_osrel | f        |               | {old::ps0(0),new::ps0(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps1_osrel | f        |               | {old::ps1(0),new::ps1(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps2_osrel | f        |               | {old::ps2(0),new::ps2(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps3_osrel | f        |               | {old::ps3(0),new::ps3(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | stream0   | t        | {ps0,ps1,ps2} | {"id::double precision",val::text,"arrival_timestamp::timestamp(0) with time zone"}
 public | stream1   | t        | {ps3}         | {"y::timestamp without time zone",x::numeric,"arrival_timestamp::timestamp(0) with time zone"}
(6 rows)

CREATE CONTINUOUS VIEW ps4 AS SELECT id::text FROM stream0;
ERROR:  type conflict with stream "stream0": types double precision and text cannot be matched
SELECT schema, name, inferred, queries, tup_desc FROM pipeline_streams() ORDER BY name;
 schema |   name    | inferred |    queries    |                                            tup_desc                                            
--------+-----------+----------+---------------+------------------------------------------------------------------------------------------------
 public | ps0_osrel | f        |               | {old::ps0(0),new::ps0(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps1_osrel | f        |               | {old::ps1(0),new::ps1(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps2_osrel | f        |               | {old::ps2(0),new::ps2(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps3_osrel | f        |               | {old::ps3(0),new::ps3(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | stream0   | t        | {ps0,ps1,ps2} | {"id::double precision",val::text,"arrival_timestamp::timestamp(0) with time zone"}
 public | stream1   | t        | {ps3}         | {"y::timestamp without time zone",x::numeric,"arrival_timestamp::timestamp(0) with time zone"}
(6 rows)

CREATE STREAM stream2 (x INT);
SELECT schema, name, inferred, queries, tup_desc FROM pipeline_streams() ORDER BY name;
 schema |   name    | inferred |    queries    |                                            tup_desc                                            
--------+-----------+----------+---------------+------------------------------------------------------------------------------------------------
 public | ps0_osrel | f        |               | {old::ps0(0),new::ps0(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps1_osrel | f        |               | {old::ps1(0),new::ps1(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps2_osrel | f        |               | {old::ps2(0),new::ps2(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps3_osrel | f        |               | {old::ps3(0),new::ps3(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | stream0   | t        | {ps0,ps1,ps2} | {"id::double precision",val::text,"arrival_timestamp::timestamp(0) with time zone"}
 public | stream1   | t        | {ps3}         | {"y::timestamp without time zone",x::numeric,"arrival_timestamp::timestamp(0) with time zone"}
 public | stream2   | f        |               | {x::integer,"arrival_timestamp::timestamp(0) with time zone"}
(7 rows)

CREATE CONTINUOUS VIEW ps5 AS SELECT x FROM stream2;
SELECT schema, name, inferred, queries, tup_desc FROM pipeline_streams() ORDER BY name;
 schema |   name    | inferred |    queries    |                                            tup_desc                                            
--------+-----------+----------+---------------+------------------------------------------------------------------------------------------------
 public | ps0_osrel | f        |               | {old::ps0(0),new::ps0(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps1_osrel | f        |               | {old::ps1(0),new::ps1(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps2_osrel | f        |               | {old::ps2(0),new::ps2(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps3_osrel | f        |               | {old::ps3(0),new::ps3(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps5_osrel | f        |               | {old::ps5(0),new::ps5(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | stream0   | t        | {ps0,ps1,ps2} | {"id::double precision",val::text,"arrival_timestamp::timestamp(0) with time zone"}
 public | stream1   | t        | {ps3}         | {"y::timestamp without time zone",x::numeric,"arrival_timestamp::timestamp(0) with time zone"}
 public | stream2   | f        | {ps5}         | {x::integer,"arrival_timestamp::timestamp(0) with time zone"}
(8 rows)

DROP CONTINUOUS VIEW ps0;
SELECT schema, name, inferred, queries, tup_desc FROM pipeline_streams() ORDER BY name;
 schema |   name    | inferred |  queries  |                                            tup_desc                                            
--------+-----------+----------+-----------+------------------------------------------------------------------------------------------------
 public | ps1_osrel | f        |           | {old::ps1(0),new::ps1(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps2_osrel | f        |           | {old::ps2(0),new::ps2(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps3_osrel | f        |           | {old::ps3(0),new::ps3(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps5_osrel | f        |           | {old::ps5(0),new::ps5(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | stream0   | t        | {ps1,ps2} | {"id::double precision",val::text,"arrival_timestamp::timestamp(0) with time zone"}
 public | stream1   | t        | {ps3}     | {"y::timestamp without time zone",x::numeric,"arrival_timestamp::timestamp(0) with time zone"}
 public | stream2   | f        | {ps5}     | {x::integer,"arrival_timestamp::timestamp(0) with time zone"}
(7 rows)

DROP CONTINUOUS VIEW ps1;
SELECT schema, name, inferred, queries, tup_desc FROM pipeline_streams() ORDER BY name;
 schema |   name    | inferred | queries |                                            tup_desc                                            
--------+-----------+----------+---------+------------------------------------------------------------------------------------------------
 public | ps2_osrel | f        |         | {old::ps2(0),new::ps2(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps3_osrel | f        |         | {old::ps3(0),new::ps3(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | ps5_osrel | f        |         | {old::ps5(0),new::ps5(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | stream0   | t        | {ps2}   | {"id::double precision","arrival_timestamp::timestamp(0) with time zone"}
 public | stream1   | t        | {ps3}   | {"y::timestamp without time zone",x::numeric,"arrival_timestamp::timestamp(0) with time zone"}
 public | stream2   | f        | {ps5}   | {x::integer,"arrival_timestamp::timestamp(0) with time zone"}
(6 rows)

DROP CONTINUOUS VIEW ps2;
DROP CONTINUOUS VIEW ps3;
SELECT schema, name, inferred, queries, tup_desc FROM pipeline_streams() ORDER BY name;
 schema |   name    | inferred | queries |                                  tup_desc                                  
--------+-----------+----------+---------+----------------------------------------------------------------------------
 public | ps5_osrel | f        |         | {old::ps5(0),new::ps5(0),"arrival_timestamp::timestamp(0) with time zone"}
 public | stream2   | f        | {ps5}   | {x::integer,"arrival_timestamp::timestamp(0) with time zone"}
(2 rows)

DROP CONTINUOUS VIEW ps5;
SELECT schema, name, inferred, queries, tup_desc FROM pipeline_streams() ORDER BY name;
 schema |  name   | inferred | queries |                           tup_desc                            
--------+---------+----------+---------+---------------------------------------------------------------
 public | stream2 | f        |         | {x::integer,"arrival_timestamp::timestamp(0) with time zone"}
(1 row)

DROP STREAM stream2;
SELECT schema, name, inferred, queries, tup_desc FROM pipeline_streams() ORDER BY name;
 schema | name | inferred | queries | tup_desc 
--------+------+----------+---------+----------
(0 rows)

