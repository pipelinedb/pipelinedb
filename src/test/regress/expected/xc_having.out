-- this file contains tests for HAVING clause with combinations of following
-- 1. enable_hashagg = on/off (to force the grouping by sorting)
-- 2. distributed or replicated tables across the datanodes
-- If a testcase is added to any of the combinations, please check if it's
-- applicable in other combinations as well.
-- Since we are testing, the plan reduction of GROUP and AGG nodes, we should
-- disable fast query shipping
set enable_fast_query_shipping to off;
-- Combination 1: enable_hashagg on and distributed tables
set enable_hashagg to on;
-- create required tables and fill them with data
create table xc_having_tab1 (val int, val2 int);
create table xc_having_tab2 (val int, val2 int);
insert into xc_having_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_having_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
-- having clause not containing any aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_having_tab1.val))), pg_catalog.avg((avg(xc_having_tab1.val))), ((pg_catalog.sum((sum(xc_having_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_having_tab1.val2
   ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
         Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
         Remote query: SELECT count(*), sum(val), avg(val), val2 FROM ONLY public.xc_having_tab1 WHERE ((val2 + 1) > 3) GROUP BY 4
(5 rows)

-- having clause containing aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
 count | sum |        avg         | ?column? | val2 
-------+-----+--------------------+----------+------
     2 |   8 | 4.0000000000000000 |        4 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_having_tab1.val))), pg_catalog.avg((avg(xc_having_tab1.val))), ((pg_catalog.sum((sum(xc_having_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_having_tab1.val2
   Filter: (pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75)
   ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
         Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
         Remote query: SELECT count(*), sum(val), avg(val), val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 4
(6 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2 order by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(2 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2 order by val2;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_having_tab1.val))), pg_catalog.avg((avg(xc_having_tab1.val))), ((pg_catalog.sum((sum(xc_having_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_having_tab1.val2
   Filter: ((pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75) OR (xc_having_tab1.val2 > 2))
   ->  Sort
         Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
         Sort Key: xc_having_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
               Remote query: SELECT count(*), sum(val), avg(val), val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 4 ORDER BY 4
(9 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
 count | sum | avg | ?column? | val2 
-------+-----+-----+----------+------
(0 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_having_tab1.val))), pg_catalog.avg((avg(xc_having_tab1.val))), ((pg_catalog.sum((sum(xc_having_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_having_tab1.val2
   Filter: (pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75)
   ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
         Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
         Remote query: SELECT count(*), sum(val), avg(val), val2 FROM ONLY public.xc_having_tab1 WHERE (val2 > 2) GROUP BY 4
(6 rows)

-- joins and group by and having
select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
 count | sum |         avg         | ?column? | val2 | val2 
-------+-----+---------------------+----------+------+------
     6 |  96 | 16.0000000000000000 |       16 |    2 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
                                                                                                                            QUERY PLAN                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: count(*), sum((xc_having_tab1.val * xc_having_tab2.val)), avg((xc_having_tab1.val * xc_having_tab2.val)), ((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision), xc_having_tab1.val2, xc_having_tab2.val2
   ->  Hash Join
         Output: xc_having_tab1.val2, xc_having_tab1.val, xc_having_tab2.val2, xc_having_tab2.val
         Hash Cond: (xc_having_tab1.val2 = xc_having_tab2.val2)
         Join Filter: ((xc_having_tab1.val2 + xc_having_tab2.val2) > 2)
         ->  Data Node Scan on xc_having_tab1 "_REMOTE_TABLE_QUERY_"
               Output: xc_having_tab1.val2, xc_having_tab1.val
               Remote query: SELECT val2, val FROM ONLY public.xc_having_tab1 WHERE true
         ->  Hash
               Output: xc_having_tab2.val2, xc_having_tab2.val
               ->  Data Node Scan on xc_having_tab2 "_REMOTE_TABLE_QUERY_"
                     Output: xc_having_tab2.val2, xc_having_tab2.val
                     Remote query: SELECT val2, val FROM ONLY public.xc_having_tab2 WHERE true
(14 rows)

-- group by and having, without aggregate in the target list
select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
 val2 
------
    3
(1 row)

explain (verbose true, costs false, nodes false) select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 HashAggregate
   Output: xc_having_tab1.val2
   Filter: (pg_catalog.sum((sum(xc_having_tab1.val))) > 8)
   ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
         Output: xc_having_tab1.val2, (sum(xc_having_tab1.val))
         Remote query: SELECT val2, sum(val) FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 1
(6 rows)

select val + val2 sum from xc_having_tab1 group by val + val2 having sum(val) > 5 order by sum;
 sum 
-----
   4
   8
   9
(3 rows)

explain (verbose true, costs false, nodes false) select val + val2 sum from xc_having_tab1 group by val + val2 having sum(val) > 5 order by sum;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ((xc_having_tab1.val + xc_having_tab1.val2))
   Filter: (pg_catalog.sum((sum(xc_having_tab1.val))) > 5)
   ->  Sort
         Output: ((xc_having_tab1.val + xc_having_tab1.val2)), (sum(xc_having_tab1.val))
         Sort Key: ((xc_having_tab1.val + xc_having_tab1.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: ((xc_having_tab1.val + xc_having_tab1.val2)), (sum(xc_having_tab1.val))
               Remote query: SELECT (val + val2), sum(val) FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 1 ORDER BY 1
(9 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
      ?column?       | val2 
---------------------+------
 17.6666666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: (((pg_catalog.count(*) + pg_catalog.sum((sum(xc_having_tab1.val)))))::numeric + pg_catalog.avg((avg(xc_having_tab1.val)))), xc_having_tab1.val2
   Filter: (min((min(xc_having_tab1.val))) < xc_having_tab1.val2)
   ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
         Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2, (min(xc_having_tab1.val))
         Remote query: SELECT count(*), sum(val), avg(val), val2, min(val) FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 4
(6 rows)

drop table xc_having_tab1;
drop table xc_having_tab2;
-- Combination 2, enable_hashagg on and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_having_tab1 (val int, val2 int) distribute by replication;
create table xc_having_tab2 (val int, val2 int) distribute by replication;
insert into xc_having_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_having_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
-- having clause not containing any aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), (((sum(xc_having_tab1.val))::double precision / (count(*))::double precision)), xc_having_tab1.val2
   Remote query: SELECT count(*), sum(val), pg_catalog.int8_avg(avg(val)), ((sum(val))::double precision / (count(*))::double precision), val2 FROM ONLY public.xc_having_tab1 WHERE ((val2 + 1) > 3) GROUP BY 5
(3 rows)

-- having clause containing aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
 count | sum |        avg         | ?column? | val2 
-------+-----+--------------------+----------+------
     2 |   8 | 4.0000000000000000 |        4 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), (((sum(xc_having_tab1.val))::double precision / (count(*))::double precision)), xc_having_tab1.val2
   Remote query: SELECT count(*), sum(val), pg_catalog.int8_avg(avg(val)), ((sum(val))::double precision / (count(*))::double precision), val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 5 HAVING (pg_catalog.int8_avg(avg(val)) > 3.75)
(3 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2 order by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(2 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2 order by val2;
                                                                                                                                  QUERY PLAN                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), (((sum(xc_having_tab1.val))::double precision / (count(*))::double precision)), xc_having_tab1.val2
   Remote query: SELECT count(*), sum(val), pg_catalog.int8_avg(avg(val)), ((sum(val))::double precision / (count(*))::double precision), val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 5 HAVING ((pg_catalog.int8_avg(avg(val)) > 3.75) OR (val2 > 2)) ORDER BY 5
(3 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
 count | sum | avg | ?column? | val2 
-------+-----+-----+----------+------
(0 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), (((sum(xc_having_tab1.val))::double precision / (count(*))::double precision)), xc_having_tab1.val2
   Remote query: SELECT count(*), sum(val), pg_catalog.int8_avg(avg(val)), ((sum(val))::double precision / (count(*))::double precision), val2 FROM ONLY public.xc_having_tab1 WHERE (val2 > 2) GROUP BY 5 HAVING (pg_catalog.int8_avg(avg(val)) > 3.75)
(3 rows)

-- joins and group by and having
select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
 count | sum |         avg         | ?column? | val2 | val2 
-------+-----+---------------------+----------+------+------
     6 |  96 | 16.0000000000000000 |       16 |    2 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
                                                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: (count(*)), (sum((xc_having_tab1.val * xc_having_tab2.val))), (avg((xc_having_tab1.val * xc_having_tab2.val))), (((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision)), xc_having_tab1.val2, xc_having_tab2.val2
   Remote query: SELECT count(*), sum((l.a_2 * r.a_2)), pg_catalog.int8_avg(avg((l.a_2 * r.a_2))), ((sum((l.a_2 * r.a_2)))::double precision / (count(*))::double precision), l.a_1, r.a_1 FROM ((SELECT xc_having_tab1.val2, xc_having_tab1.val FROM ONLY public.xc_having_tab1 WHERE true) l(a_1, a_2) JOIN (SELECT xc_having_tab2.val2, xc_having_tab2.val FROM ONLY public.xc_having_tab2 WHERE true) r(a_1, a_2) ON (true)) WHERE (((l.a_1 + r.a_1) > 2) AND (l.a_1 = r.a_1)) GROUP BY 5, 6
(3 rows)

-- group by and having, without aggregate in the target list
select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
 val2 
------
    3
(1 row)

explain (verbose true, costs false, nodes false) select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: xc_having_tab1.val2
   Remote query: SELECT val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 1 HAVING (sum(val) > 8)
(3 rows)

select val + val2 sum from xc_having_tab1 group by val + val2 having sum(val) > 5 order by sum;
 sum 
-----
   4
   8
   9
(3 rows)

explain (verbose true, costs false, nodes false) select val + val2 sum from xc_having_tab1 group by val + val2 having sum(val) > 5 order by sum;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: ((xc_having_tab1.val + xc_having_tab1.val2))
   Remote query: SELECT (val + val2) FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 1 HAVING (sum(val) > 5) ORDER BY 1
(3 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
      ?column?       | val2 
---------------------+------
 17.6666666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: ((((count(*) + sum(xc_having_tab1.val)))::numeric + avg(xc_having_tab1.val))), xc_having_tab1.val2
   Remote query: SELECT (((count(*) + sum(val)))::numeric + pg_catalog.int8_avg(avg(val))), val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 2 HAVING (min(val) < val2)
(3 rows)

drop table xc_having_tab1;
drop table xc_having_tab2;
-- Combination 3 enable_hashagg off and distributed tables
set enable_hashagg to off;
-- create required tables and fill them with data
create table xc_having_tab1 (val int, val2 int);
create table xc_having_tab2 (val int, val2 int);
insert into xc_having_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_having_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
-- having clause not containing any aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_having_tab1.val))), pg_catalog.avg((avg(xc_having_tab1.val))), ((pg_catalog.sum((sum(xc_having_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_having_tab1.val2
   ->  Sort
         Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
         Sort Key: xc_having_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
               Remote query: SELECT count(*), sum(val), avg(val), val2 FROM ONLY public.xc_having_tab1 WHERE ((val2 + 1) > 3) GROUP BY 4 ORDER BY 4
(8 rows)

-- having clause containing aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
 count | sum |        avg         | ?column? | val2 
-------+-----+--------------------+----------+------
     2 |   8 | 4.0000000000000000 |        4 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_having_tab1.val))), pg_catalog.avg((avg(xc_having_tab1.val))), ((pg_catalog.sum((sum(xc_having_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_having_tab1.val2
   Filter: (pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75)
   ->  Sort
         Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
         Sort Key: xc_having_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
               Remote query: SELECT count(*), sum(val), avg(val), val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 4 ORDER BY 4
(9 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2 order by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(2 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2 order by val2;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_having_tab1.val))), pg_catalog.avg((avg(xc_having_tab1.val))), ((pg_catalog.sum((sum(xc_having_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_having_tab1.val2
   Filter: ((pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75) OR (xc_having_tab1.val2 > 2))
   ->  Sort
         Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
         Sort Key: xc_having_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
               Remote query: SELECT count(*), sum(val), avg(val), val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 4 ORDER BY 4
(9 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
 count | sum | avg | ?column? | val2 
-------+-----+-----+----------+------
(0 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(xc_having_tab1.val))), pg_catalog.avg((avg(xc_having_tab1.val))), ((pg_catalog.sum((sum(xc_having_tab1.val))))::double precision / (pg_catalog.count(*))::double precision), xc_having_tab1.val2
   Filter: (pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75)
   ->  Sort
         Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
         Sort Key: xc_having_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2
               Remote query: SELECT count(*), sum(val), avg(val), val2 FROM ONLY public.xc_having_tab1 WHERE (val2 > 2) GROUP BY 4 ORDER BY 4
(9 rows)

-- joins and group by and having
select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
 count | sum |         avg         | ?column? | val2 | val2 
-------+-----+---------------------+----------+------+------
     6 |  96 | 16.0000000000000000 |       16 |    2 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
                                                                                                                            QUERY PLAN                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: count(*), sum((xc_having_tab1.val * xc_having_tab2.val)), avg((xc_having_tab1.val * xc_having_tab2.val)), ((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision), xc_having_tab1.val2, xc_having_tab2.val2
   ->  Sort
         Output: xc_having_tab1.val2, xc_having_tab2.val2, xc_having_tab1.val, xc_having_tab2.val
         Sort Key: xc_having_tab1.val2, xc_having_tab2.val2
         ->  Hash Join
               Output: xc_having_tab1.val2, xc_having_tab2.val2, xc_having_tab1.val, xc_having_tab2.val
               Hash Cond: (xc_having_tab1.val2 = xc_having_tab2.val2)
               Join Filter: ((xc_having_tab1.val2 + xc_having_tab2.val2) > 2)
               ->  Data Node Scan on xc_having_tab1 "_REMOTE_TABLE_QUERY_"
                     Output: xc_having_tab1.val2, xc_having_tab1.val
                     Remote query: SELECT val2, val FROM ONLY public.xc_having_tab1 WHERE true
               ->  Hash
                     Output: xc_having_tab2.val2, xc_having_tab2.val
                     ->  Data Node Scan on xc_having_tab2 "_REMOTE_TABLE_QUERY_"
                           Output: xc_having_tab2.val2, xc_having_tab2.val
                           Remote query: SELECT val2, val FROM ONLY public.xc_having_tab2 WHERE true
(17 rows)

-- group by and having, without aggregate in the target list
select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
 val2 
------
    3
(1 row)

explain (verbose true, costs false, nodes false) select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: xc_having_tab1.val2
   Filter: (pg_catalog.sum((sum(xc_having_tab1.val))) > 8)
   ->  Sort
         Output: xc_having_tab1.val2, (sum(xc_having_tab1.val))
         Sort Key: xc_having_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: xc_having_tab1.val2, (sum(xc_having_tab1.val))
               Remote query: SELECT val2, sum(val) FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 1 ORDER BY 1
(9 rows)

select val + val2 from xc_having_tab1 group by val + val2 having sum(val) > 5;
 ?column? 
----------
        4
        8
        9
(3 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_having_tab1 group by val + val2 having sum(val) > 5;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ((xc_having_tab1.val + xc_having_tab1.val2))
   Filter: (pg_catalog.sum((sum(xc_having_tab1.val))) > 5)
   ->  Sort
         Output: ((xc_having_tab1.val + xc_having_tab1.val2)), (sum(xc_having_tab1.val))
         Sort Key: ((xc_having_tab1.val + xc_having_tab1.val2))
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: ((xc_having_tab1.val + xc_having_tab1.val2)), (sum(xc_having_tab1.val))
               Remote query: SELECT (val + val2), sum(val) FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 1 ORDER BY 1
(9 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
      ?column?       | val2 
---------------------+------
 17.6666666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: (((pg_catalog.count(*) + pg_catalog.sum((sum(xc_having_tab1.val)))))::numeric + pg_catalog.avg((avg(xc_having_tab1.val)))), xc_having_tab1.val2
   Filter: (min((min(xc_having_tab1.val))) < xc_having_tab1.val2)
   ->  Sort
         Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2, (min(xc_having_tab1.val))
         Sort Key: xc_having_tab1.val2
         ->  Data Node Scan on "__REMOTE_GROUP_QUERY__"
               Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), xc_having_tab1.val2, (min(xc_having_tab1.val))
               Remote query: SELECT count(*), sum(val), avg(val), val2, min(val) FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 4 ORDER BY 4
(9 rows)

drop table xc_having_tab1;
drop table xc_having_tab2;
-- Combination 4 enable_hashagg off and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_having_tab1 (val int, val2 int) distribute by replication;
create table xc_having_tab2 (val int, val2 int) distribute by replication;
insert into xc_having_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_having_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
-- having clause not containing any aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), (((sum(xc_having_tab1.val))::double precision / (count(*))::double precision)), xc_having_tab1.val2
   Remote query: SELECT count(*), sum(val), pg_catalog.int8_avg(avg(val)), ((sum(val))::double precision / (count(*))::double precision), val2 FROM ONLY public.xc_having_tab1 WHERE ((val2 + 1) > 3) GROUP BY 5 ORDER BY 5
(3 rows)

-- having clause containing aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
 count | sum |        avg         | ?column? | val2 
-------+-----+--------------------+----------+------
     2 |   8 | 4.0000000000000000 |        4 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
                                                                                                                          QUERY PLAN                                                                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), (((sum(xc_having_tab1.val))::double precision / (count(*))::double precision)), xc_having_tab1.val2
   Remote query: SELECT count(*), sum(val), pg_catalog.int8_avg(avg(val)), ((sum(val))::double precision / (count(*))::double precision), val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 5 HAVING (pg_catalog.int8_avg(avg(val)) > 3.75) ORDER BY 5
(3 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2 order by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(2 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2 order by val2;
                                                                                                                                  QUERY PLAN                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), (((sum(xc_having_tab1.val))::double precision / (count(*))::double precision)), xc_having_tab1.val2
   Remote query: SELECT count(*), sum(val), pg_catalog.int8_avg(avg(val)), ((sum(val))::double precision / (count(*))::double precision), val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 5 HAVING ((pg_catalog.int8_avg(avg(val)) > 3.75) OR (val2 > 2)) ORDER BY 5
(3 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
 count | sum | avg | ?column? | val2 
-------+-----+-----+----------+------
(0 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
                                                                                                                             QUERY PLAN                                                                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: (count(*)), (sum(xc_having_tab1.val)), (avg(xc_having_tab1.val)), (((sum(xc_having_tab1.val))::double precision / (count(*))::double precision)), xc_having_tab1.val2
   Remote query: SELECT count(*), sum(val), pg_catalog.int8_avg(avg(val)), ((sum(val))::double precision / (count(*))::double precision), val2 FROM ONLY public.xc_having_tab1 WHERE (val2 > 2) GROUP BY 5 HAVING (pg_catalog.int8_avg(avg(val)) > 3.75) ORDER BY 5
(3 rows)

-- joins and group by and having
select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
 count | sum |         avg         | ?column? | val2 | val2 
-------+-----+---------------------+----------+------+------
     6 |  96 | 16.0000000000000000 |       16 |    2 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: (count(*)), (sum((xc_having_tab1.val * xc_having_tab2.val))), (avg((xc_having_tab1.val * xc_having_tab2.val))), (((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision)), xc_having_tab1.val2, xc_having_tab2.val2
   Remote query: SELECT count(*), sum((l.a_2 * r.a_2)), pg_catalog.int8_avg(avg((l.a_2 * r.a_2))), ((sum((l.a_2 * r.a_2)))::double precision / (count(*))::double precision), l.a_1, r.a_1 FROM ((SELECT xc_having_tab1.val2, xc_having_tab1.val FROM ONLY public.xc_having_tab1 WHERE true) l(a_1, a_2) JOIN (SELECT xc_having_tab2.val2, xc_having_tab2.val FROM ONLY public.xc_having_tab2 WHERE true) r(a_1, a_2) ON (true)) WHERE (((l.a_1 + r.a_1) > 2) AND (l.a_1 = r.a_1)) GROUP BY 5, 6 ORDER BY 5, 6
(3 rows)

-- group by and having, without aggregate in the target list
select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
 val2 
------
    3
(1 row)

explain (verbose true, costs false, nodes false) select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: xc_having_tab1.val2
   Remote query: SELECT val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 1 HAVING (sum(val) > 8) ORDER BY 1
(3 rows)

select val + val2 from xc_having_tab1 group by val + val2 having sum(val) > 5;
 ?column? 
----------
        4
        8
        9
(3 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_having_tab1 group by val + val2 having sum(val) > 5;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: ((xc_having_tab1.val + xc_having_tab1.val2))
   Remote query: SELECT (val + val2) FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 1 HAVING (sum(val) > 5) ORDER BY 1
(3 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
      ?column?       | val2 
---------------------+------
 17.6666666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_GROUP_QUERY__"
   Output: ((((count(*) + sum(xc_having_tab1.val)))::numeric + avg(xc_having_tab1.val))), xc_having_tab1.val2
   Remote query: SELECT (((count(*) + sum(val)))::numeric + pg_catalog.int8_avg(avg(val))), val2 FROM ONLY public.xc_having_tab1 WHERE true GROUP BY 2 HAVING (min(val) < val2) ORDER BY 2
(3 rows)

drop table xc_having_tab1;
drop table xc_having_tab2;
reset enable_hashagg;
reset enable_fast_query_shipping;
