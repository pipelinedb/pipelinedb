CREATE STREAM ct_stream0 (x int);
CREATE STREAM ct_stream1 (x int);
CREATE CONTINUOUS VIEW ct0 AS SELECT x::int, count(*) FROM ct_stream0 GROUP BY x;
CREATE CONTINUOUS TRANSFORM ct1 AS SELECT x::int % 4 AS x FROM ct_stream1 WHERE x > 10 AND x < 50 THEN EXECUTE PROCEDURE pipeline_stream_insert('ct_stream0');
CREATE TABLE ct2 (x int);
CREATE OR REPLACE FUNCTION ct_tg()
RETURNS trigger AS
$$
BEGIN
 INSERT INTO ct2 (x) VALUES (NEW.x);
 RETURN NEW;
END;
$$
LANGUAGE plpgsql;
CREATE CONTINUOUS TRANSFORM ct3 AS SELECT x::int FROM ct_stream1 WHERE x % 2 = 0 THEN EXECUTE PROCEDURE ct_tg();
INSERT INTO ct_stream1 (x) SELECT generate_series(0, 100) AS x;
SELECT * FROM ct0 ORDER BY x;
 x | count 
---+-------
 0 |    10
 1 |    10
 2 |     9
 3 |    10
(4 rows)

SELECT * FROM ct2 ORDER BY x;
  x  
-----
   0
   2
   4
   6
   8
  10
  12
  14
  16
  18
  20
  22
  24
  26
  28
  30
  32
  34
  36
  38
  40
  42
  44
  46
  48
  50
  52
  54
  56
  58
  60
  62
  64
  66
  68
  70
  72
  74
  76
  78
  80
  82
  84
  86
  88
  90
  92
  94
  96
  98
 100
(51 rows)

DROP FUNCTION ct_tg() CASCADE;
NOTICE:  drop cascades to continuous transform ct3
DROP TABLE ct2;
DROP CONTINUOUS TRANSFORM ct1;
DROP CONTINUOUS VIEW ct0;
DROP STREAM ct_stream0;
DROP STREAM ct_stream1;
-- Stream-table JOIN
CREATE TABLE ct_t (x integer, s text);
INSERT INTO ct_t (x, s) VALUES (0, 'zero');
INSERT INTO ct_t (x, s) VALUES (1, 'one');
CREATE STREAM ct_s0 (x text);
CREATE STREAM ct_s1 (x int);
CREATE CONTINUOUS VIEW ct_v AS SELECT x::text FROM ct_s0;
CREATE CONTINUOUS TRANSFORM ct AS
  SELECT t.s AS x FROM ct_s1 s JOIN ct_t t on t.x = s.x::integer
  THEN EXECUTE PROCEDURE pipeline_stream_insert('ct_s0');
NOTICE:  consider creating an index on t.x for improved stream-table join performance
INSERT INTO ct_s1 (x) VALUES (0), (1);
INSERT INTO ct_s1 (x) VALUES (0), (2);
SELECT * FROM ct_v ORDER BY x;
  x   
------
 one
 zero
 zero
(3 rows)

DROP CONTINUOUS TRANSFORM ct;
DROP CONTINUOUS VIEW ct_v;
DROP TABLE ct_t;
DROP STREAM ct_s1;
DROP STREAM ct_s0;
CREATE STREAM ct_s (x int, y text);
CREATE CONTINUOUS TRANSFORM ct_invalid AS SELECT y, x FROM ct_s THEN EXECUTE PROCEDURE pipeline_stream_insert('ct_s');
ERROR:  "ct_s" must have the same schema as the transform
CREATE CONTINUOUS TRANSFORM ct_invalid AS SELECT x, x AS y FROM ct_s THEN EXECUTE PROCEDURE pipeline_stream_insert('ct_s');
ERROR:  "ct_s" must have the same schema as the transform
CREATE CONTINUOUS TRANSFORM ct_valid AS SELECT x, 'a'::text FROM ct_s THEN EXECUTE PROCEDURE pipeline_stream_insert('ct_s');
DROP STREAM ct_s CASCADE;
NOTICE:  drop cascades to continuous transform ct_valid
CREATE STREAM ct_s0 (x int);
CREATE STREAM ct_s1 (x int);
CREATE CONTINUOUS TRANSFORM ct_t AS SELECT x % 4 AS x FROM ct_s0 THEN EXECUTE PROCEDURE pipeline_stream_insert('ct_s1');
CREATE CONTINUOUS VIEW ct_v0 AS SELECT x FROM ct_s1;
CREATE CONTINUOUS VIEW ct_v1 AS SELECT x FROM output_of('ct_t');
INSERT INTO ct_s0 SELECT generate_series(1, 10) x;
SELECT * FROM ct_v0;
 x 
---
 1
 2
 3
 0
 1
 2
 3
 0
 1
 2
(10 rows)

SELECT * FROM ct_v1;
 x 
---
 1
 2
 3
 0
 1
 2
 3
 0
 1
 2
(10 rows)

CREATE CONTINUOUS TRANSFORM ct_ostream AS SELECT 1 AS a, 2 AS b, 3 AS c, x + 42 AS d FROM ct_s1;
DROP STREAM ct_s0 CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to continuous transform ct_t
drop cascades to continuous view ct_v1
CREATE STREAM fanout (x integer);
CREATE CONTINUOUS TRANSFORM fanout0 AS SELECT generate_series(1, 2) FROM fanout;
CREATE CONTINUOUS TRANSFORM fanout1 AS SELECT generate_series(1, 2) FROM output_of('fanout0');
CREATE CONTINUOUS TRANSFORM fanout2 AS SELECT generate_series(1, 2) FROM output_of('fanout1');
CREATE CONTINUOUS TRANSFORM fanout3 AS SELECT generate_series(1, 2) FROM output_of('fanout2');
CREATE CONTINUOUS TRANSFORM fanout4 AS SELECT generate_series(1, 2) FROM output_of('fanout3');
CREATE CONTINUOUS TRANSFORM fanout5 AS SELECT generate_series(1, 2) FROM output_of('fanout4');
CREATE CONTINUOUS TRANSFORM fanout6 AS SELECT generate_series(1, 2) FROM output_of('fanout5');
CREATE CONTINUOUS TRANSFORM fanout7 AS SELECT generate_series(1, 2) FROM output_of('fanout6');
CREATE CONTINUOUS TRANSFORM fanout8 AS SELECT generate_series(1, 2) FROM output_of('fanout7');
CREATE CONTINUOUS TRANSFORM fanout9 AS SELECT generate_series(1, 2) FROM output_of('fanout8');
CREATE CONTINUOUS TRANSFORM fanout10 AS SELECT generate_series(1, 2) FROM output_of('fanout9');
CREATE CONTINUOUS VIEW fanout11 AS SELECT count(*) FROM output_of('fanout10');
INSERT INTO fanout (x) VALUES (0);
SELECT * FROM fanout11;
 count 
-------
  2048
(1 row)

INSERT INTO fanout (x) VALUES (0);
SELECT * FROM fanout11;
 count 
-------
  4096
(1 row)

INSERT INTO fanout (x) VALUES (0);
SELECT * FROM fanout11;
 count 
-------
  6144
(1 row)

DROP STREAM fanout CASCADE;
NOTICE:  drop cascades to 12 other objects
DETAIL:  drop cascades to continuous transform fanout0
drop cascades to continuous transform fanout1
drop cascades to continuous transform fanout2
drop cascades to continuous transform fanout3
drop cascades to continuous transform fanout4
drop cascades to continuous transform fanout5
drop cascades to continuous transform fanout6
drop cascades to continuous transform fanout7
drop cascades to continuous transform fanout8
drop cascades to continuous transform fanout9
drop cascades to continuous transform fanout10
drop cascades to continuous view fanout11
CREATE STREAM ct_a (n int);
CREATE STREAM ct_b (n int);
CREATE CONTINUOUS VIEW ct_stream_insert0 AS SELECT n FROM ct_b;
CREATE FUNCTION insert_into_b () RETURNS TRIGGER AS
$$
BEGIN
  INSERT INTO ct_b VALUES (NEW.n);
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;
CREATE CONTINUOUS TRANSFORM ct_stream_insert1 AS
SELECT n FROM ct_a
THEN EXECUTE PROCEDURE insert_into_b();
INSERT INTO ct_a SELECT generate_series(1, 100);
INSERT INTO ct_a SELECT generate_series(1, 100);
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

SELECT count(*) FROM ct_stream_insert0;
 count 
-------
   200
(1 row)

DROP FUNCTION insert_into_b() CASCADE;
NOTICE:  drop cascades to continuous transform ct_stream_insert1
DROP STREAM ct_b CASCADE;
NOTICE:  drop cascades to continuous view ct_stream_insert0
DROP STREAM ct_a;
