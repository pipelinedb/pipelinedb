CREATE CONTINUOUS VIEW ct0 AS SELECT x::int, count(*) FROM ct_stream0 GROUP BY x;
CREATE CONTINUOUS TRANSFORM ct1 AS SELECT x::int % 4 AS x FROM ct_stream1 WHERE x > 10 AND x < 50 THEN EXECUTE PROCEDURE pipeline_stream_insert('ct_stream0');
CREATE TABLE ct2 (x int);
CREATE OR REPLACE FUNCTION ct_tg()
RETURNS trigger AS
$$
BEGIN
 INSERT INTO ct2 (x) VALUES (NEW.x);
 RETURN NEW;
END;
$$
LANGUAGE plpgsql;
CREATE CONTINUOUS TRANSFORM ct3 AS SELECT x::int FROM ct_stream1 WHERE x % 2 = 0 THEN EXECUTE PROCEDURE ct_tg();
INSERT INTO ct_stream1 (x) SELECT generate_series(0, 100) AS x;
SELECT * FROM ct0 ORDER BY x;
 x | count 
---+-------
 0 |    10
 1 |    10
 2 |     9
 3 |    10
(4 rows)

SELECT * FROM ct2 ORDER BY x;
  x  
-----
   0
   2
   4
   6
   8
  10
  12
  14
  16
  18
  20
  22
  24
  26
  28
  30
  32
  34
  36
  38
  40
  42
  44
  46
  48
  50
  52
  54
  56
  58
  60
  62
  64
  66
  68
  70
  72
  74
  76
  78
  80
  82
  84
  86
  88
  90
  92
  94
  96
  98
 100
(51 rows)

DROP FUNCTION ct_tg() CASCADE;
NOTICE:  drop cascades to continuous transform ct3
DROP TABLE ct2;
DROP CONTINUOUS TRANSFORM ct1;
DROP CONTINUOUS VIEW ct0;
-- Stream-table JOIN
CREATE TABLE ct_t (x integer, s text);
INSERT INTO ct_t (x, s) VALUES (0, 'zero');
INSERT INTO ct_t (x, s) VALUES (1, 'one');
CREATE CONTINUOUS VIEW ct_v AS SELECT x::text FROM ct_s0;
CREATE CONTINUOUS TRANSFORM ct AS
  SELECT t.s AS x FROM ct_s1 s JOIN ct_t t on t.x = s.x::integer
  THEN EXECUTE PROCEDURE pipeline_stream_insert('ct_s0');
NOTICE:  consider creating an index on t.x for improved stream-table join performance
INSERT INTO ct_s1 (x) VALUES (0), (1);
INSERT INTO ct_s1 (x) VALUES (0), (2);
SELECT * FROM ct_v ORDER BY x;
  x   
------
 one
 zero
 zero
(3 rows)

DROP CONTINUOUS TRANSFORM ct;
DROP CONTINUOUS VIEW ct_v;
DROP TABLE ct_t;
