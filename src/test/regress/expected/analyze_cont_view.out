-- Sanity checks
CREATE STREAM analyze_cont_stream (url text, x text, a int, b int, c int, id int, value int, ts timestamp, val numeric);
CREATE CONTINUOUS VIEW cqanalyze0 AS SELECT substring(url, 1, 2) FROM analyze_cont_stream;
CREATE CONTINUOUS VIEW cqanalyze1 AS SELECT CASE WHEN x = '1' THEN 1 END FROM analyze_cont_stream;
CREATE CONTINUOUS VIEW cqanalyze2 AS SELECT a FROM analyze_cont_stream GROUP BY a;
CREATE CONTINUOUS VIEW cqanalyze3 AS SELECT a FROM analyze_cont_stream WHERE a > 10 GROUP BY a;
CREATE CONTINUOUS VIEW cqanalyze4 AS SELECT a, b FROM analyze_cont_stream WHERE a > 10 GROUP BY a, b, c HAVING a < 12 AND c > 2;
ERROR:  continuous queries don't support HAVING clauses
HINT:  Try using a WHERE clause on the continuous view instead.
CREATE CONTINUOUS VIEW cqanalyze5 AS SELECT substring(url, 1, 2) AS g, COUNT(*) FROM analyze_cont_stream GROUP BY g;
CREATE CONTINUOUS VIEW cqanalyze6 AS SELECT s.id FROM analyze_cont_stream s WHERE s.id < 10 AND s.value > 10;
-- Windows
CREATE CONTINUOUS VIEW cqanalyze10 AS SELECT ts, SUM(val) OVER (ORDER BY ts) FROM analyze_cont_stream;
ERROR:  continuous queries don't support WINDOW functions
CREATE CONTINUOUS VIEW cqanalyze11 AS SELECT ts, AVG(val) OVER (PARTITION BY ts ORDER BY ts) FROM analyze_cont_stream;
ERROR:  continuous queries don't support WINDOW functions
CREATE CONTINUOUS VIEW cqanalyze12 AS SELECT ts, AVG(val) OVER (PARTITION BY ts ORDER BY (ts + INTERVAL '1 day')) FROM analyze_cont_stream;
ERROR:  continuous queries don't support WINDOW functions
-- Stream-table JOINs
CREATE TABLE t0 (id INTEGER);
CREATE CONTINUOUS VIEW cqanalyze16 AS SELECT s0.id AS s0_id, t0.id AS t0_id FROM analyze_cont_stream s0 JOIN t0 ON s0.id = t0.id;
NOTICE:  consider creating an index on t0.id for improved stream-table join performance
CREATE CONTINUOUS VIEW cqanalyze17 AS SELECT s.a, t0.id FROM analyze_cont_stream s JOIN t0 ON s.a = t0.id;
NOTICE:  consider creating an index on t0.id for improved stream-table join performance
DROP STREAM analyze_cont_stream CASCADE;
NOTICE:  drop cascades to 8 other objects
DETAIL:  drop cascades to continuous view cqanalyze0
drop cascades to continuous view cqanalyze1
drop cascades to continuous view cqanalyze2
drop cascades to continuous view cqanalyze3
drop cascades to continuous view cqanalyze5
drop cascades to continuous view cqanalyze6
drop cascades to continuous view cqanalyze16
drop cascades to continuous view cqanalyze17
-- Now let's verify our error handling and messages
CREATE STREAM analyze_cont_stream (x integer, key text);
-- Stream column doesn't exist
CREATE CONTINUOUS VIEW cqanalyze23 AS SELECT col FROM analyze_cont_stream;
ERROR:  column "col" does not exist
LINE 1: CREATE CONTINUOUS VIEW cqanalyze23 AS SELECT col FROM analyz...
                                                     ^
-- Verify that NOTICEs are properly shown when joining on unindexed columns
CREATE TABLE tnotice (x integer, y integer);
CREATE CONTINUOUS VIEW cvnotice0 AS SELECT stream.x FROM analyze_cont_stream AS stream JOIN tnotice ON stream.x = tnotice.x;
NOTICE:  consider creating an index on tnotice.x for improved stream-table join performance
-- tnotice.x NOTICE should only be shown once
CREATE CONTINUOUS VIEW cvnotice1 AS SELECT stream.x FROM analyze_cont_stream AS stream JOIN tnotice ON stream.x = tnotice.x AND stream.x = tnotice.x;
NOTICE:  consider creating an index on tnotice.x for improved stream-table join performance
CREATE CONTINUOUS VIEW cvnotice2 AS SELECT stream.x FROM analyze_cont_stream AS stream, tnotice WHERE tnotice.x = stream.x;
NOTICE:  consider creating an index on tnotice.x for improved stream-table join performance
CREATE INDEX tnotice_idx ON tnotice(x);
-- No NOTICE should be given now that an index exists
CREATE CONTINUOUS VIEW cvnotice3 AS SELECT stream.x FROM analyze_cont_stream AS stream, tnotice WHERE tnotice.x = stream.x;
DROP TABLE tnotice CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to continuous view cvnotice0
drop cascades to continuous view cvnotice1
drop cascades to continuous view cvnotice2
drop cascades to continuous view cvnotice3
-- Verify that we can't do wildcard selections in continuous queries
CREATE CONTINUOUS VIEW cqanalyze32 AS SELECT * from analyze_cont_stream;
ERROR:  can't select "*" in continuous queries
LINE 1: CREATE CONTINUOUS VIEW cqanalyze32 AS SELECT * from analyze_...
                                                     ^
HINT:  Explicitly state the columns you want to SELECT.
CREATE CONTINUOUS VIEW cqanalyze33 AS SELECT * from analyze_cont_stream, t0;
ERROR:  can't select "*" in continuous queries
LINE 1: CREATE CONTINUOUS VIEW cqanalyze33 AS SELECT * from analyze_...
                                                     ^
HINT:  Explicitly state the columns you want to SELECT.
CREATE CONTINUOUS VIEW cqanalyze34 AS SELECT t0.* from analyze_cont_stream, t0;
ERROR:  can't select "t0.*" in continuous queries
LINE 1: CREATE CONTINUOUS VIEW cqanalyze34 AS SELECT t0.* from analy...
                                                     ^
HINT:  Explicitly state the columns you want to SELECT.
CREATE CONTINUOUS VIEW cqanalyze35 AS SELECT s.* from analyze_cont_stream s, t0;
ERROR:  can't select "s.*" in continuous queries
LINE 1: CREATE CONTINUOUS VIEW cqanalyze35 AS SELECT s.* from analyz...
                                                     ^
HINT:  Explicitly state the columns you want to SELECT.
-- Disallow sorting streams
CREATE CONTINUOUS VIEW cqanalyze36 AS SELECT key from analyze_cont_stream ORDER BY key;
ERROR:  continuous queries don't support ORDER BY
CREATE CONTINUOUS VIEW cqanalyze37 AS SELECT key from analyze_cont_stream ORDER BY arrival_time;
ERROR:  continuous queries don't support ORDER BY
-- Sliding window queries
CREATE CONTINUOUS VIEW cqanalyze38 AS SELECT COUNT(*) FROM analyze_cont_stream WHERE arrival_timestamp > clock_timestamp() - interval '1 hour';
CREATE CONTINUOUS VIEW cqanalyze39 AS SELECT COUNT(*) FROM analyze_cont_stream WHERE arrival_timestamp > clock_timestamp() - interval '1 hour' AND key::text='pipelinedb';
CREATE CONTINUOUS VIEW cqanalyze40 AS SELECT COUNT(*) FROM analyze_cont_stream WHERE NOT arrival_timestamp > clock_timestamp() - interval '1 hour';
ERROR:  clock_timestamp() may only appear as a top-level conjunction predicate
LINE 1: ...analyze_cont_stream WHERE NOT arrival_timestamp > clock_time...
                                                             ^
CREATE CONTINUOUS VIEW cqanalyze41 AS SELECT COUNT(*) FROM analyze_cont_stream WHERE arrival_timestamp > clock_timestamp() - interval '1 hour' OR key::text='pipelinedb';
ERROR:  clock_timestamp() may only appear as a top-level conjunction predicate
LINE 1: ...ROM analyze_cont_stream WHERE arrival_timestamp > clock_time...
                                                             ^
CREATE CONTINUOUS VIEW cqanalyze42 AS SELECT COUNT(*) FROM analyze_cont_stream WHERE arrival_timestamp > clock_timestamp() - interval '1 hour' AND arrival_timestamp > clock_timestamp() - interval '5 hour';
ERROR:  clock_timestamp() may only appear once in a WHERE clause
LINE 1: ...amp() - interval '1 hour' AND arrival_timestamp > clock_time...
                                                             ^
DROP STREAM analyze_cont_stream CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to continuous view cqanalyze38
drop cascades to continuous view cqanalyze39
CREATE STREAM analyze_cont_stream (g int, x int, y int, z text, a int);
-- Hypothetical-set aggregates
CREATE CONTINUOUS VIEW cqanalyze45 AS SELECT g, percent_rank(1 + 3, 2, substring('xxx', 1, 2)) WITHIN GROUP (ORDER BY x, y, z) + rank(4, 5, 'x') WITHIN GROUP (ORDER BY x, y, substring(z, 1, 2))  FROM analyze_cont_stream GROUP BY g;
CREATE CONTINUOUS VIEW cqanalyze46 AS SELECT rank(0, 1) WITHIN GROUP (ORDER BY x, y) + rank(0) WITHIN GROUP (ORDER BY x) FROM analyze_cont_stream;
-- Number of arguments to HS function is inconsistent with the number of GROUP columns
CREATE CONTINUOUS VIEW error_not_created AS SELECT percent_rank(1) WITHIN GROUP (ORDER BY x, y, z) FROM analyze_cont_stream;
ERROR:  function percent_rank(integer, integer, integer, text) does not exist
LINE 1: ...REATE CONTINUOUS VIEW error_not_created AS SELECT percent_ra...
                                                             ^
HINT:  To use the hypothetical-set aggregate percent_rank, the number of hypothetical direct arguments (here 1) must match the number of ordering columns (here 3).
-- Types of arguments to HS function are inconsistent with GROUP column types
CREATE CONTINUOUS VIEW error_not_created AS SELECT g, dense_rank(2, 3, 4) WITHIN GROUP (ORDER BY x, y, z) FROM analyze_cont_stream GROUP BY g;
ERROR:  WITHIN GROUP types text and integer cannot be matched
LINE 1: ...W error_not_created AS SELECT g, dense_rank(2, 3, 4) WITHIN ...
                                                             ^
CREATE CONTINUOUS VIEW cqanalyze47 AS SELECT g, rank(2, 3, 4) WITHIN GROUP (ORDER BY x, y, a), sum(x + y + a) FROM analyze_cont_stream GROUP BY g;
-- Sliding windows
CREATE CONTINUOUS VIEW cqanalyze48 AS SELECT cume_dist(2) WITHIN GROUP (ORDER BY x DESC) FROM analyze_cont_stream WHERE (arrival_timestamp > clock_timestamp() - interval '5 minutes');
CREATE CONTINUOUS VIEW cqanalyze49 AS SELECT percent_rank(2) WITHIN GROUP (ORDER BY x DESC), rank(2) WITHIN GROUP (ORDER BY x) FROM analyze_cont_stream WHERE (arrival_timestamp > clock_timestamp() - interval '5 minutes');
DROP STREAM analyze_cont_stream CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to continuous view cqanalyze45
drop cascades to continuous view cqanalyze46
drop cascades to continuous view cqanalyze47
drop cascades to continuous view cqanalyze48
drop cascades to continuous view cqanalyze49
-- Verify that we get an error if we try to create a CV that only selects from tables
CREATE TABLE cqanalyze_table (id integer);
CREATE CONTINUOUS VIEW error_not_created AS SELECT cqanalyze_table.id::integer FROM cqanalyze_table;
ERROR:  continuous queries must include a stream in the FROM clause
LINE 1: ...reated AS SELECT cqanalyze_table.id::integer FROM cqanalyze_...
                                                             ^
HINT:  To include a relation in a continuous query, JOIN it with a stream.
DROP TABLE cqanalyze_table;
CREATE STREAM analyze_cont_stream (id int, x float, y int, z numeric, g int, k text);
-- Verify that for stream-table joins, the correct error message is generated when the table is missing
CREATE CONTINUOUS VIEW  error_not_created AS SELECT s.id, t.tid FROM analyze_cont_stream s JOIN not_a_table t ON s.id = t.tid;
ERROR:  relation "not_a_table" does not exist
CREATE CONTINUOUS VIEW  error_not_created AS SELECT s.id, tid FROM analyze_cont_stream s JOIN not_a_table ON s.id = tid;
ERROR:  relation "not_a_table" does not exist
-- Ordered-set aggregates
CREATE CONTINUOUS VIEW cqanalyze50 AS SELECT g, percentile_cont(ARRAY[0.2, 0.8]) WITHIN GROUP (ORDER BY x), percentile_cont(0.9) WITHIN GROUP (ORDER BY y) + percentile_cont(0.1) WITHIN GROUP (ORDER BY z) AS col FROM analyze_cont_stream GROUP BY g;
CREATE CONTINUOUS VIEW cqanalyze51 AS SELECT g, percentile_cont(0.1) WITHIN GROUP (ORDER BY x + y) FROM analyze_cont_stream GROUP BY g;
-- Can only sort on a numeric expression
CREATE CONTINUOUS VIEW error_not_created AS SELECT percentile_cont(0.1) WITHIN GROUP (ORDER BY k) FROM analyze_cont_stream;
ERROR:  function percentile_cont(numeric, text) does not exist
LINE 1: ...REATE CONTINUOUS VIEW error_not_created AS SELECT percentile...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- Sliding windows
CREATE CONTINUOUS VIEW cqanalyze52 AS SELECT g, percentile_cont(ARRAY[0.2, 0.8]) WITHIN GROUP (ORDER BY x), percentile_cont(0.9) WITHIN GROUP (ORDER BY y) + percentile_cont(0.1) WITHIN GROUP (ORDER BY z) AS col FROM analyze_cont_stream WHERE (arrival_timestamp > clock_timestamp() - interval '5 minutes') GROUP BY g;
CREATE CONTINUOUS VIEW cqanalyze53 AS SELECT percentile_cont(0.1) WITHIN GROUP (ORDER BY x + y) FROM analyze_cont_stream WHERE (arrival_timestamp > clock_timestamp() - interval '5 minutes');
CREATE CONTINUOUS VIEW funcs AS SELECT floor(x::float8), date_trunc('day', arrival_timestamp), COUNT(*) FROM analyze_cont_stream GROUP BY floor, date_trunc;
DROP STREAM analyze_cont_stream CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to continuous view cqanalyze50
drop cascades to continuous view cqanalyze51
drop cascades to continuous view cqanalyze52
drop cascades to continuous view cqanalyze53
drop cascades to continuous view funcs
DROP TABLE t0;
CREATE STREAM analyze_cont_stream (id int, ts timestamp, sid int, x int);
-- Regression
CREATE CONTINUOUS VIEW cqregress1 AS SELECT id + avg(id) FROM analyze_cont_stream GROUP BY id;
CREATE CONTINUOUS VIEW cqregress2 AS SELECT date_trunc('hour', ts) AS ts FROM analyze_cont_stream;
CREATE CONTINUOUS VIEW cqregress3 AS SELECT stream.sid::integer FROM analyze_cont_stream;
ERROR:  missing FROM-clause entry for table "stream"
LINE 1: CREATE CONTINUOUS VIEW cqregress3 AS SELECT stream.sid::inte...
                                                    ^
CREATE CONTINUOUS VIEW cqregress4 AS SELECT x FROM cqregress4;
ERROR:  relation "cqregress4" does not exist
CREATE CONTINUOUS VIEW cqregress5 AS SELECT count(DISTINCT x), percentile_cont(0.1) WITHIN GROUP (ORDER BY x) FROM analyze_cont_stream;
\d+ cqregress5
                  Continuous view "public.cqregress5"
     Column      |       Type       | Modifiers | Storage | Description 
-----------------+------------------+-----------+---------+-------------
 count           | bigint           |           | plain   | 
 percentile_cont | double precision |           | plain   | 
View definition:
 SELECT count(DISTINCT x) AS count,
    percentile_cont(0.1::double precision) WITHIN GROUP (ORDER BY (x::double precision)) AS percentile_cont
   FROM ONLY analyze_cont_stream;

CREATE CONTINUOUS VIEW cqregress6 AS SELECT id, avg(x) FROM analyze_cont_stream GROUP BY id;
\d+ cqregress6
         Continuous view "public.cqregress6"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 id     | integer |           | plain   | 
 avg    | numeric |           | main    | 
View definition:
 SELECT id,
    avg(x) AS avg
   FROM ONLY analyze_cont_stream
  GROUP BY id;

CREATE VIEW cqregress7 AS SELECT combine(avg) FROM cqregress6;
\d+ cqregress7
               View "public.cqregress7"
 Column  |  Type   | Modifiers | Storage | Description 
---------+---------+-----------+---------+-------------
 combine | numeric |           | main    | 
View definition:
 SELECT combine(cqregress6.avg) AS combine
   FROM cqregress6;

DROP STREAM analyze_cont_stream CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to continuous view cqregress1
drop cascades to continuous view cqregress2
drop cascades to continuous view cqregress5
drop cascades to continuous view cqregress6
drop cascades to view cqregress7
