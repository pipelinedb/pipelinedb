SET IntervalStyle to postgres;
-- Simple ones
CREATE CONTINUOUS VIEW cqcreate0 AS SELECT key::integer FROM create_cont_stream1;
SELECT COUNT(*) FROM pipeline_query WHERE name = 'cqcreate0';
 count 
-------
     1
(1 row)

SELECT gc FROM pipeline_query WHERE name = 'cqcreate0';
 gc 
----
 f
(1 row)

\d+ cqcreate0;
          Continuous view "public.cqcreate0"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 key    | integer |           | plain   | 
View definition:
 SELECT key::integer
   FROM ONLY create_cont_stream1;

\d+ cqcreate0_mrel;
                    Table "public.cqcreate0_mrel"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 key    | integer |           | plain   |              | 
 $pk    | bigint  | not null  | plain   |              | 
Indexes:
    "cqcreate0_mrel_pkey" PRIMARY KEY, btree ("$pk")
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqcreate0');
 pipeline_get_overlay_viewdef 
------------------------------
  SELECT cqcreate0_mrel.key  +
    FROM cqcreate0_mrel;
(1 row)

CREATE CONTINUOUS VIEW cqcreate1 AS SELECT substring(url::text, 1, 2) FROM create_cont_stream1;
SELECT COUNT(*) FROM pipeline_query WHERE name = 'cqcreate1';
 count 
-------
     1
(1 row)

\d+ cqcreate1;
          Continuous view "public.cqcreate1"
  Column   | Type | Modifiers | Storage  | Description 
-----------+------+-----------+----------+-------------
 substring | text |           | extended | 
View definition:
 SELECT "substring"(url::text, 1, 2) AS "substring"
   FROM ONLY create_cont_stream1;

\d+ cqcreate1_mrel;
                     Table "public.cqcreate1_mrel"
  Column   |  Type  | Modifiers | Storage  | Stats target | Description 
-----------+--------+-----------+----------+--------------+-------------
 substring | text   |           | extended |              | 
 $pk       | bigint | not null  | plain    |              | 
Indexes:
    "cqcreate1_mrel_pkey" PRIMARY KEY, btree ("$pk")
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqcreate1');
    pipeline_get_overlay_viewdef    
------------------------------------
  SELECT cqcreate1_mrel."substring"+
    FROM cqcreate1_mrel;
(1 row)

CREATE CONTINUOUS VIEW cqcreate2 AS SELECT key::integer, substring(value::text, 1, 2) AS s FROM create_cont_stream1;
SELECT COUNT(*) FROM pipeline_query WHERE name = 'cqcreate2';
 count 
-------
     1
(1 row)

\d+ cqcreate2;
          Continuous view "public.cqcreate2"
 Column |  Type   | Modifiers | Storage  | Description 
--------+---------+-----------+----------+-------------
 key    | integer |           | plain    | 
 s      | text    |           | extended | 
View definition:
 SELECT key::integer,
    "substring"(value::text, 1, 2) AS s
   FROM ONLY create_cont_stream1;

\d+ cqcreate2_mrel;
                    Table "public.cqcreate2_mrel"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 key    | integer |           | plain    |              | 
 s      | text    |           | extended |              | 
 $pk    | bigint  | not null  | plain    |              | 
Indexes:
    "cqcreate2_mrel_pkey" PRIMARY KEY, btree ("$pk")
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqcreate2');
 pipeline_get_overlay_viewdef 
------------------------------
  SELECT cqcreate2_mrel.key, +
     cqcreate2_mrel.s        +
    FROM cqcreate2_mrel;
(1 row)

-- Group by projections
CREATE CONTINUOUS VIEW cqcreate3 AS SELECT key::text, COUNT(*), SUM(value::int8) FROM cont_create_stream2 GROUP BY key;
SELECT COUNT(*) FROM pipeline_query WHERE name = 'cqcreate3';
 count 
-------
     1
(1 row)

\d+ cqcreate3;
          Continuous view "public.cqcreate3"
 Column |  Type   | Modifiers | Storage  | Description 
--------+---------+-----------+----------+-------------
 key    | text(0) |           | extended | 
 count  | bigint  |           | plain    | 
 sum    | numeric |           | main     | 
View definition:
 SELECT key::text,
    count(*) AS count,
    sum(value::bigint) AS sum
   FROM ONLY cont_create_stream2
  GROUP BY key::text;

\d+ cqcreate3_mrel;
                    Table "public.cqcreate3_mrel"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 key    | text(0) |           | extended |              | 
 count  | bigint  |           | plain    |              | 
 sum    | bytea   |           | extended |              | 
 $pk    | bigint  | not null  | plain    |              | 
Indexes:
    "cqcreate3_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "cqcreate3_mrel_expr_idx" btree (hash_group(key))
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqcreate3');
               pipeline_get_overlay_viewdef                
-----------------------------------------------------------
  SELECT cqcreate3_mrel.key,                              +
     cqcreate3_mrel.count,                                +
     numeric_sum(naggstaterecv(cqcreate3_mrel.sum)) AS sum+
    FROM cqcreate3_mrel;
(1 row)

CREATE CONTINUOUS VIEW cqcreate4 AS SELECT COUNT(*), SUM(value::int8) FROM cont_create_stream2 GROUP BY key::text;
SELECT COUNT(*) FROM pipeline_query WHERE name = 'cqcreate4';
 count 
-------
     1
(1 row)

\d+ cqcreate4;
          Continuous view "public.cqcreate4"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 count  | bigint  |           | plain   | 
 sum    | numeric |           | main    | 
View definition:
 SELECT count(*) AS count,
    sum(value::bigint) AS sum
   FROM ONLY cont_create_stream2
  GROUP BY key::text;

\d+ cqcreate4_mrel;
                    Table "public.cqcreate4_mrel"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 _0     | text(0) |           | extended |              | 
 count  | bigint  |           | plain    |              | 
 sum    | bytea   |           | extended |              | 
 $pk    | bigint  | not null  | plain    |              | 
Indexes:
    "cqcreate4_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "cqcreate4_mrel_expr_idx" btree (hash_group(_0))
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqcreate4');
               pipeline_get_overlay_viewdef                
-----------------------------------------------------------
  SELECT cqcreate4_mrel.count,                            +
     numeric_sum(naggstaterecv(cqcreate4_mrel.sum)) AS sum+
    FROM cqcreate4_mrel;
(1 row)

-- Sliding window queries
CREATE CONTINUOUS VIEW cqcreate5 AS SELECT key::text FROM cont_create_stream2 WHERE arrival_timestamp > (clock_timestamp() - interval '5 seconds');
SELECT COUNT(*) FROM pipeline_query WHERE name = 'cqcreate5';
 count 
-------
     1
(1 row)

SELECT gc FROM pipeline_query WHERE name = 'cqcreate5';
 gc 
----
 t
(1 row)

\d+ cqcreate5;
          Continuous view "public.cqcreate5"
 Column |  Type   | Modifiers | Storage  | Description 
--------+---------+-----------+----------+-------------
 key    | text(0) |           | extended | 
View definition:
 SELECT key::text
   FROM ONLY cont_create_stream2
  WHERE arrival_timestamp::timestamp with time zone > (clock_timestamp() - '00:00:05'::interval);

\d+ cqcreate5_mrel;
                                    Table "public.cqcreate5_mrel"
      Column       |            Type             | Modifiers | Storage  | Stats target | Description 
-------------------+-----------------------------+-----------+----------+--------------+-------------
 arrival_timestamp | timestamp(0) with time zone |           | plain    |              | 
 key               | text(0)                     |           | extended |              | 
 $pk               | bigint                      | not null  | plain    |              | 
Indexes:
    "cqcreate5_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "cqcreate5_mrel_arrival_timestamp_idx" btree (arrival_timestamp)
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqcreate5');
                               pipeline_get_overlay_viewdef                               
------------------------------------------------------------------------------------------
  SELECT cqcreate5_mrel.key                                                              +
    FROM cqcreate5_mrel                                                                  +
   WHERE (cqcreate5_mrel.arrival_timestamp > (clock_timestamp() - '00:00:05'::interval));
(1 row)

CREATE CONTINUOUS VIEW cqcreate6 AS SELECT COUNT(*) FROM cont_create_stream2 WHERE arrival_timestamp > (clock_timestamp() - interval '5 seconds') GROUP BY key::text;
SELECT COUNT(*) FROM pipeline_query WHERE name = 'cqcreate6';
 count 
-------
     1
(1 row)

SELECT gc FROM pipeline_query WHERE name = 'cqcreate6';
 gc 
----
 t
(1 row)

\d+ cqcreate6;
         Continuous view "public.cqcreate6"
 Column |  Type  | Modifiers | Storage | Description 
--------+--------+-----------+---------+-------------
 count  | bigint |           | plain   | 
View definition:
 SELECT count(*) AS count
   FROM ONLY cont_create_stream2
  WHERE arrival_timestamp::timestamp with time zone > (clock_timestamp() - '00:00:05'::interval)
  GROUP BY key::text;

\d+ cqcreate6_mrel;
                                  Table "public.cqcreate6_mrel"
      Column       |           Type           | Modifiers | Storage  | Stats target | Description 
-------------------+--------------------------+-----------+----------+--------------+-------------
 arrival_timestamp | timestamp with time zone |           | plain    |              | 
 _0                | text(0)                  |           | extended |              | 
 count             | bigint                   |           | plain    |              | 
 $pk               | bigint                   | not null  | plain    |              | 
Indexes:
    "cqcreate6_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "cqcreate6_mrel_expr_idx" btree (ls_hash_group(arrival_timestamp, _0))
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqcreate6');
                              pipeline_get_overlay_viewdef                               
-----------------------------------------------------------------------------------------
  SELECT combine(cqcreate6_mrel.count) AS count                                         +
    FROM cqcreate6_mrel                                                                 +
   WHERE (cqcreate6_mrel.arrival_timestamp > (clock_timestamp() - '00:00:05'::interval))+
   GROUP BY cqcreate6_mrel._0;
(1 row)

-- These use a combine state column
CREATE CONTINUOUS VIEW cvavg AS SELECT key::text, AVG(x::float8) AS float_avg, AVG(y::integer) AS int_avg, AVG(ts0::timestamp - ts1::timestamp) AS internal_avg FROM cont_create_stream2 GROUP BY key;
\d+ cvavg;
                    Continuous view "public.cvavg"
    Column    |       Type       | Modifiers | Storage  | Description 
--------------+------------------+-----------+----------+-------------
 key          | text(0)          |           | extended | 
 float_avg    | double precision |           | plain    | 
 int_avg      | numeric          |           | main     | 
 internal_avg | interval         |           | plain    | 
View definition:
 SELECT key::text,
    avg(x::double precision) AS float_avg,
    avg(y::integer) AS int_avg,
    avg(ts0::timestamp without time zone - ts1::timestamp without time zone) AS internal_avg
   FROM ONLY cont_create_stream2
  GROUP BY key::text;

\d+ cvavg_mrel;
                               Table "public.cvavg_mrel"
    Column    |        Type        | Modifiers | Storage  | Stats target | Description 
--------------+--------------------+-----------+----------+--------------+-------------
 key          | text(0)            |           | extended |              | 
 float_avg    | double precision[] |           | extended |              | 
 int_avg      | bigint[]           |           | extended |              | 
 internal_avg | interval[]         |           | extended |              | 
 $pk          | bigint             | not null  | plain    |              | 
Indexes:
    "cvavg_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "cvavg_mrel_expr_idx" btree (hash_group(key))
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cvavg');
               pipeline_get_overlay_viewdef                
-----------------------------------------------------------
  SELECT cvavg_mrel.key,                                  +
     float8_avg(cvavg_mrel.float_avg) AS float_avg,       +
     int8_avg(cvavg_mrel.int_avg) AS int_avg,             +
     interval_avg(cvavg_mrel.internal_avg) AS internal_avg+
    FROM cvavg_mrel;
(1 row)

CREATE CONTINUOUS VIEW cvjson AS SELECT json_agg(x::text) AS count_col FROM create_cont_stream1;
\d+ cvjson;
            Continuous view "public.cvjson"
  Column   | Type | Modifiers | Storage  | Description 
-----------+------+-----------+----------+-------------
 count_col | json |           | extended | 
View definition:
 SELECT json_agg(x::text) AS count_col
   FROM ONLY create_cont_stream1;

\d+ cvjson_mrel;
                       Table "public.cvjson_mrel"
  Column   |  Type  | Modifiers | Storage  | Stats target | Description 
-----------+--------+-----------+----------+--------------+-------------
 count_col | bytea  |           | extended |              | 
 $pk       | bigint | not null  | plain    |              | 
Indexes:
    "cvjson_mrel_pkey" PRIMARY KEY, btree ("$pk")
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cvjson');
                          pipeline_get_overlay_viewdef                           
---------------------------------------------------------------------------------
  SELECT json_agg_finalfn(byteatostringinfo(cvjson_mrel.count_col)) AS count_col+
    FROM cvjson_mrel;
(1 row)

CREATE CONTINUOUS VIEW cvjsonobj AS SELECT json_object_agg(key::text, value::integer) FROM cont_create_stream2;
\d+ cvjsonobj;
             Continuous view "public.cvjsonobj"
     Column      | Type | Modifiers | Storage  | Description 
-----------------+------+-----------+----------+-------------
 json_object_agg | json |           | extended | 
View definition:
 SELECT json_object_agg(key::text, value::integer) AS json_object_agg
   FROM ONLY cont_create_stream2;

\d+ cvjsonobj_mrel;
                        Table "public.cvjsonobj_mrel"
     Column      |  Type  | Modifiers | Storage  | Stats target | Description 
-----------------+--------+-----------+----------+--------------+-------------
 json_object_agg | bytea  |           | extended |              | 
 $pk             | bigint | not null  | plain    |              | 
Indexes:
    "cvjsonobj_mrel_pkey" PRIMARY KEY, btree ("$pk")
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cvjsonobj');
                                     pipeline_get_overlay_viewdef                                      
-------------------------------------------------------------------------------------------------------
  SELECT json_object_agg_finalfn(byteatostringinfo(cvjsonobj_mrel.json_object_agg)) AS json_object_agg+
    FROM cvjsonobj_mrel;
(1 row)

-- But these aggregates don't
CREATE CONTINUOUS VIEW cvcount AS SELECT SUM(x::integer + y::float8) AS sum_col FROM cont_create_stream2;
\d+ cvcount;
                Continuous view "public.cvcount"
 Column  |       Type       | Modifiers | Storage | Description 
---------+------------------+-----------+---------+-------------
 sum_col | double precision |           | plain   | 
View definition:
 SELECT sum(x::integer::double precision + y::double precision) AS sum_col
   FROM ONLY cont_create_stream2;

\d+ cvcount_mrel;
                          Table "public.cvcount_mrel"
 Column  |       Type       | Modifiers | Storage | Stats target | Description 
---------+------------------+-----------+---------+--------------+-------------
 sum_col | double precision |           | plain   |              | 
 $pk     | bigint           | not null  | plain   |              | 
Indexes:
    "cvcount_mrel_pkey" PRIMARY KEY, btree ("$pk")
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cvcount');
 pipeline_get_overlay_viewdef 
------------------------------
  SELECT cvcount_mrel.sum_col+
    FROM cvcount_mrel;
(1 row)

CREATE CONTINUOUS VIEW cvarray AS SELECT COUNT(*) as count_col FROM create_cont_stream1;
\d+ cvarray;
            Continuous view "public.cvarray"
  Column   |  Type  | Modifiers | Storage | Description 
-----------+--------+-----------+---------+-------------
 count_col | bigint |           | plain   | 
View definition:
 SELECT count(*) AS count_col
   FROM ONLY create_cont_stream1;

\d+ cvarray_mrel;
                      Table "public.cvarray_mrel"
  Column   |  Type  | Modifiers | Storage | Stats target | Description 
-----------+--------+-----------+---------+--------------+-------------
 count_col | bigint |           | plain   |              | 
 $pk       | bigint | not null  | plain   |              | 
Indexes:
    "cvarray_mrel_pkey" PRIMARY KEY, btree ("$pk")
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cvarray');
  pipeline_get_overlay_viewdef  
--------------------------------
  SELECT cvarray_mrel.count_col+
    FROM cvarray_mrel;
(1 row)

CREATE CONTINUOUS VIEW cvtext AS SELECT key::text, string_agg(substring(s::text, 1, 2), ',') FROM cont_create_stream2 GROUP BY key;
\d+ cvtext;
              Continuous view "public.cvtext"
   Column   |  Type   | Modifiers | Storage  | Description 
------------+---------+-----------+----------+-------------
 key        | text(0) |           | extended | 
 string_agg | text    |           | extended | 
View definition:
 SELECT key::text,
    string_agg("substring"(s::text, 1, 2), ','::text) AS string_agg
   FROM ONLY cont_create_stream2
  GROUP BY key::text;

\d+ cvtext_mrel;
                        Table "public.cvtext_mrel"
   Column   |  Type   | Modifiers | Storage  | Stats target | Description 
------------+---------+-----------+----------+--------------+-------------
 key        | text(0) |           | extended |              | 
 string_agg | bytea   |           | extended |              | 
 $pk        | bigint  | not null  | plain    |              | 
Indexes:
    "cvtext_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "cvtext_mrel_expr_idx" btree (hash_group(key))
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cvtext');
                           pipeline_get_overlay_viewdef                           
----------------------------------------------------------------------------------
  SELECT cvtext_mrel.key,                                                        +
     string_agg_finalfn(stringaggstaterecv(cvtext_mrel.string_agg)) AS string_agg+
    FROM cvtext_mrel;
(1 row)

-- Check for expressions containing aggregates
CREATE CONTINUOUS VIEW cqaggexpr1 AS SELECT COUNT(*) + SUM(x::int) FROM cont_create_stream2;
\d+ cqaggexpr1;
          Continuous view "public.cqaggexpr1"
  Column  |  Type  | Modifiers | Storage | Description 
----------+--------+-----------+---------+-------------
 ?column? | bigint |           | plain   | 
View definition:
 SELECT count(*) + sum(x::integer)
   FROM ONLY cont_create_stream2;

\d+ cqaggexpr1_mrel;
                   Table "public.cqaggexpr1_mrel"
 Column |  Type  | Modifiers | Storage | Stats target | Description 
--------+--------+-----------+---------+--------------+-------------
 _0     | bigint |           | plain   |              | 
 _1     | bigint |           | plain   |              | 
 $pk    | bigint | not null  | plain   |              | 
Indexes:
    "cqaggexpr1_mrel_pkey" PRIMARY KEY, btree ("$pk")
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqaggexpr1');
           pipeline_get_overlay_viewdef            
---------------------------------------------------
  SELECT (cqaggexpr1_mrel._0 + cqaggexpr1_mrel._1)+
    FROM cqaggexpr1_mrel;
(1 row)

CREATE CONTINUOUS VIEW cqaggexpr2 AS SELECT key::text, AVG(x::float) + MAX(y::integer) AS value FROM cont_create_stream2 GROUP BY key;
\d+ cqaggexpr2;
              Continuous view "public.cqaggexpr2"
 Column |       Type       | Modifiers | Storage  | Description 
--------+------------------+-----------+----------+-------------
 key    | text(0)          |           | extended | 
 value  | double precision |           | plain    | 
View definition:
 SELECT key::text,
    avg(x::double precision) OPERATOR(pg_catalog.+) max(y::integer)::double precision AS value
   FROM ONLY cont_create_stream2
  GROUP BY key::text;

\d+ cqaggexpr2_mrel;
                         Table "public.cqaggexpr2_mrel"
 Column |        Type        | Modifiers | Storage  | Stats target | Description 
--------+--------------------+-----------+----------+--------------+-------------
 key    | text(0)            |           | extended |              | 
 _0     | double precision[] |           | extended |              | 
 _1     | integer            |           | plain    |              | 
 $pk    | bigint             | not null  | plain    |              | 
Indexes:
    "cqaggexpr2_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "cqaggexpr2_mrel_expr_idx" btree (hash_group(key))
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqaggexpr2');
                              pipeline_get_overlay_viewdef                              
----------------------------------------------------------------------------------------
  SELECT cqaggexpr2_mrel.key,                                                          +
     (float8_avg(cqaggexpr2_mrel._0) + (cqaggexpr2_mrel._1)::double precision) AS value+
    FROM cqaggexpr2_mrel;
(1 row)

CREATE CONTINUOUS VIEW cqaggexpr3 AS SELECT key::text, COUNT(*) AS value FROM cont_create_stream2 WHERE arrival_timestamp > (clock_timestamp() - interval '5 seconds') GROUP BY key;
\d+ cqaggexpr3;
          Continuous view "public.cqaggexpr3"
 Column |  Type   | Modifiers | Storage  | Description 
--------+---------+-----------+----------+-------------
 key    | text(0) |           | extended | 
 value  | bigint  |           | plain    | 
View definition:
 SELECT key::text,
    count(*) AS value
   FROM ONLY cont_create_stream2
  WHERE arrival_timestamp::timestamp with time zone > (clock_timestamp() - '00:00:05'::interval)
  GROUP BY key::text;

\d+ cqaggexpr3_mrel;
                                  Table "public.cqaggexpr3_mrel"
      Column       |           Type           | Modifiers | Storage  | Stats target | Description 
-------------------+--------------------------+-----------+----------+--------------+-------------
 arrival_timestamp | timestamp with time zone |           | plain    |              | 
 key               | text(0)                  |           | extended |              | 
 value             | bigint                   |           | plain    |              | 
 $pk               | bigint                   | not null  | plain    |              | 
Indexes:
    "cqaggexpr3_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "cqaggexpr3_mrel_expr_idx" btree (ls_hash_group(arrival_timestamp, key))
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqaggexpr3');
                               pipeline_get_overlay_viewdef                               
------------------------------------------------------------------------------------------
  SELECT cqaggexpr3_mrel.key,                                                            +
     combine(cqaggexpr3_mrel.value) AS value                                             +
    FROM cqaggexpr3_mrel                                                                 +
   WHERE (cqaggexpr3_mrel.arrival_timestamp > (clock_timestamp() - '00:00:05'::interval))+
   GROUP BY cqaggexpr3_mrel.key;
(1 row)

CREATE CONTINUOUS VIEW cqaggexpr4 AS SELECT key::text, floor(AVG(x::float)) AS value FROM cont_create_stream2 GROUP BY key;
\d+ cqaggexpr4;
              Continuous view "public.cqaggexpr4"
 Column |       Type       | Modifiers | Storage  | Description 
--------+------------------+-----------+----------+-------------
 key    | text(0)          |           | extended | 
 value  | double precision |           | plain    | 
View definition:
 SELECT key::text,
    pg_catalog.floor(avg(x::double precision)) AS value
   FROM ONLY cont_create_stream2
  GROUP BY key::text;

\d+ cqaggexpr4_mrel;
                         Table "public.cqaggexpr4_mrel"
 Column |        Type        | Modifiers | Storage  | Stats target | Description 
--------+--------------------+-----------+----------+--------------+-------------
 key    | text(0)            |           | extended |              | 
 _0     | double precision[] |           | extended |              | 
 $pk    | bigint             | not null  | plain    |              | 
Indexes:
    "cqaggexpr4_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "cqaggexpr4_mrel_expr_idx" btree (hash_group(key))
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqaggexpr4');
            pipeline_get_overlay_viewdef            
----------------------------------------------------
  SELECT cqaggexpr4_mrel.key,                      +
     floor(float8_avg(cqaggexpr4_mrel._0)) AS value+
    FROM cqaggexpr4_mrel;
(1 row)

CREATE CONTINUOUS VIEW cqgroupby AS SELECT k0::text, k1::integer, COUNT(*) FROM create_cont_stream1 GROUP BY k0, k1;
\d+ cqgroupby
          Continuous view "public.cqgroupby"
 Column |  Type   | Modifiers | Storage  | Description 
--------+---------+-----------+----------+-------------
 k0     | text(0) |           | extended | 
 k1     | integer |           | plain    | 
 count  | bigint  |           | plain    | 
View definition:
 SELECT k0::text,
    k1::integer,
    count(*) AS count
   FROM ONLY create_cont_stream1
  GROUP BY k0::text, k1::integer;

\d+ cqgroupby_mrel;
                    Table "public.cqgroupby_mrel"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 k0     | text(0) |           | extended |              | 
 k1     | integer |           | plain    |              | 
 count  | bigint  |           | plain    |              | 
 $pk    | bigint  | not null  | plain    |              | 
Indexes:
    "cqgroupby_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "cqgroupby_mrel_expr_idx" btree (hash_group(k0, k1))
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('cqgroupby');
 pipeline_get_overlay_viewdef 
------------------------------
  SELECT cqgroupby_mrel.k0,  +
     cqgroupby_mrel.k1,      +
     cqgroupby_mrel.count    +
    FROM cqgroupby_mrel;
(1 row)

CREATE CONTINUOUS VIEW multigroupindex AS SELECT a::text, b::int8, c::int4, d::int2, e::float8, COUNT(*) FROM create_cont_stream1
GROUP BY a, b, c, d, e;
\d+ multigroupindex;
            Continuous view "public.multigroupindex"
 Column |       Type       | Modifiers | Storage  | Description 
--------+------------------+-----------+----------+-------------
 a      | text(0)          |           | extended | 
 b      | bigint           |           | plain    | 
 c      | integer          |           | plain    | 
 d      | smallint         |           | plain    | 
 e      | double precision |           | plain    | 
 count  | bigint           |           | plain    | 
View definition:
 SELECT a::text,
    b::bigint,
    c::integer,
    d::smallint,
    e::double precision,
    count(*) AS count
   FROM ONLY create_cont_stream1
  GROUP BY a::text, b::bigint, c::integer, d::smallint, e::double precision;

\d+ multigroupindex_mrel;
                      Table "public.multigroupindex_mrel"
 Column |       Type       | Modifiers | Storage  | Stats target | Description 
--------+------------------+-----------+----------+--------------+-------------
 a      | text(0)          |           | extended |              | 
 b      | bigint           |           | plain    |              | 
 c      | integer          |           | plain    |              | 
 d      | smallint         |           | plain    |              | 
 e      | double precision |           | plain    |              | 
 count  | bigint           |           | plain    |              | 
 $pk    | bigint           | not null  | plain    |              | 
Indexes:
    "multigroupindex_mrel_pkey" PRIMARY KEY, btree ("$pk")
    "multigroupindex_mrel_expr_idx" btree (hash_group(a, b, c, d, e))
Options: fillfactor=50

SELECT pipeline_get_overlay_viewdef('multigroupindex');
  pipeline_get_overlay_viewdef   
---------------------------------
  SELECT multigroupindex_mrel.a,+
     multigroupindex_mrel.b,    +
     multigroupindex_mrel.c,    +
     multigroupindex_mrel.d,    +
     multigroupindex_mrel.e,    +
     multigroupindex_mrel.count +
    FROM multigroupindex_mrel;
(1 row)

-- A user-specified fillfactor should override the default
CREATE CONTINUOUS VIEW withff WITH (fillfactor = 42) AS SELECT COUNT(*) FROM stream;
\d+ withff_mrel;
                     Table "public.withff_mrel"
 Column |  Type  | Modifiers | Storage | Stats target | Description 
--------+--------+-----------+---------+--------------+-------------
 count  | bigint |           | plain   |              | 
 $pk    | bigint | not null  | plain   |              | 
Indexes:
    "withff_mrel_pkey" PRIMARY KEY, btree ("$pk")
Options: fillfactor=42

-- It shouldn't be possible to DROP a continuous view with DROP VIEW, and vice-versa
CREATE VIEW ccvv AS SELECT * FROM generate_series(1, 10);
DROP CONTINUOUS VIEW ccvv;
ERROR:  "ccvv" is not a continuous view 
HINT:  Use DROP VIEW to remove a view.
DROP VIEW ccvv;
CREATE CONTINUOUS VIEW ccvv AS SELECT COUNT(*) FROM stream;
DROP VIEW ccvv;
ERROR:  "ccvv" is not a view
HINT:  Use DROP CONTINUOUS VIEW to remove a continuous view.
DROP CONTINUOUS VIEW ccvv;
-- Subselects aren't allowed in a CV's target list
CREATE TABLE ccvt (x integer);
CREATE CONTINUOUS VIEW noss AS SELECT y::integer, (SELECT x FROM ccvt WHERE x = 1) FROM stream;
ERROR:  subqueries are not allowed in a continuous view's target list
HINT:  Stream-table joins are the preferred method for combining other relations with continuous views.
DROP TABLE ccvt;
-- arrival_timestamp is reserved
CREATE CONTINUOUS VIEW arrts AS SELECT x::integer AS arrival_timestamp FROM stream;
ERROR:  arrival_timestamp is a reserved column name
CREATE CONTINUOUS VIEW arrts AS SELECT arrival_timestamp AS arrival_timestamp FROM stream;
DROP CONTINUOUS VIEW arrts;
-- WITH max_age
CREATE CONTINUOUS VIEW ma0 WITH (max_age = '1 day') AS SELECT COUNT(*) FROM stream;
\d+ ma0;
            Continuous view "public.ma0"
 Column |  Type  | Modifiers | Storage | Description 
--------+--------+-----------+---------+-------------
 count  | bigint |           | plain   | 
View definition:
 SELECT count(*) AS count
   FROM ONLY stream
  WHERE arrival_timestamp::timestamp with time zone > (clock_timestamp() - '1 day'::interval);

CREATE VIEW ma1 WITH (max_age = '1 hour') AS SELECT COUNT(*) FROM ma0;
\d+ ma1;
                  View "public.ma1"
 Column |  Type  | Modifiers | Storage | Description 
--------+--------+-----------+---------+-------------
 count  | bigint |           | plain   | 
View definition:
 SELECT count(*) AS count
   FROM ma0
  WHERE arrival_timestamp > (clock_timestamp() - '01:00:00'::interval);

-- max_age must be a valid interval string
CREATE CONTINUOUS VIEW mainvalid WITH (max_age = 42) AS SELECT COUNT(*) FROM stream;
ERROR:  "max_age" must be a valid interval string
HINT:  For example, ... WITH (max_age = '1 hour') ...
CREATE CONTINUOUS VIEW mainvalid WITH (max_age = 42.1) AS SELECT COUNT(*) FROM stream;
ERROR:  "max_age" must be a valid interval string
HINT:  For example, ... WITH (max_age = '1 hour') ...
CREATE CONTINUOUS VIEW mainvalid WITH (max_age = 'not an interval') AS SELECT COUNT(*) FROM stream;
ERROR:  invalid input syntax for type interval: "not an interval"
LINE 1: CREATE CONTINUOUS VIEW mainvalid WITH (max_age = 'not an int...
        ^
CREATE CONTINUOUS VIEW mawhere WITH (max_age = '1 day') AS SELECT COUNT(*) FROM stream
WHERE x::integer = 1;
\d+ mawhere;
          Continuous view "public.mawhere"
 Column |  Type  | Modifiers | Storage | Description 
--------+--------+-----------+---------+-------------
 count  | bigint |           | plain   | 
View definition:
 SELECT count(*) AS count
   FROM ONLY stream
  WHERE arrival_timestamp::timestamp with time zone > (clock_timestamp() - '1 day'::interval) AND x::integer = 1;

DROP CONTINUOUS VIEW mawhere;
-- max_age can't be used on non-sliding window continuous views
CREATE VIEW manosw WITH (max_age = '1 day') AS SELECT COUNT(*) FROM withff;
ERROR:  "max_age" can only be specified when reading from a stream or continuous view
-- or in conjunction with another sliding-window predicate
CREATE VIEW manosw WITH (max_age = '1 day') AS SELECT COUNT(*) FROM stream
WHERE arrival_timestamp > clock_timestamp() - interval '1 day';
ERROR:  cannot specify both "max_age" and a sliding window expression in the WHERE clause
DROP CONTINUOUS VIEW ma0 CASCADE;
NOTICE:  drop cascades to view ma1
DROP CONTINUOUS VIEW cqcreate0;
DROP CONTINUOUS VIEW cqcreate1;
DROP CONTINUOUS VIEW cqcreate2;
DROP CONTINUOUS VIEW cqcreate3;
DROP CONTINUOUS VIEW cqcreate4;
DROP CONTINUOUS VIEW cqcreate5;
DROP CONTINUOUS VIEW cqcreate6;
DROP CONTINUOUS VIEW cvavg;
DROP CONTINUOUS VIEW cvjson;
DROP CONTINUOUS VIEW cvjsonobj;
DROP CONTINUOUS VIEW cvcount;
DROP CONTINUOUS VIEW cvarray;
DROP CONTINUOUS VIEW cvtext;
DROP CONTINUOUS VIEW cqaggexpr1;
DROP CONTINUOUS VIEW cqaggexpr2;
DROP CONTINUOUS VIEW cqaggexpr3;
DROP CONTINUOUS VIEW cqaggexpr4;
DROP CONTINUOUS VIEW cqgroupby;
DROP CONTINUOUS VIEW multigroupindex;
DROP CONTINUOUS VIEW withff;
